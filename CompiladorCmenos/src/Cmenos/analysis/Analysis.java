/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.analysis;

import Cmenos.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADeclaracoesPrograma(ADeclaracoesPrograma node);
    void caseAListaDeclaracoes(AListaDeclaracoes node);
    void caseASDeclaracaoDeclaracoes(ASDeclaracaoDeclaracoes node);
    void caseAFuncaoCParamSDeclaracao(AFuncaoCParamSDeclaracao node);
    void caseAFuncaoSParamSDeclaracao(AFuncaoSParamSDeclaracao node);
    void caseAVariavelSDeclaracao(AVariavelSDeclaracao node);
    void caseANulaVar(ANulaVar node);
    void caseAAtribuidaVar(AAtribuidaVar node);
    void caseAMatrizNulaVar(AMatrizNulaVar node);
    void caseAMatrizAtribuidaVar(AMatrizAtribuidaVar node);
    void caseATVoidTipo(ATVoidTipo node);
    void caseATIntTipo(ATIntTipo node);
    void caseATStrTipo(ATStrTipo node);
    void caseAMParametrosParametros(AMParametrosParametros node);
    void caseAParametroParametros(AParametroParametros node);
    void caseAParametroParametro(AParametroParametro node);
    void caseAExpressaoExpressao(AExpressaoExpressao node);
    void caseATermExpressao(ATermExpressao node);
    void caseATTermo(ATTermo node);
    void caseAFatTermo(AFatTermo node);
    void caseAFFator(AFFator node);
    void caseANumeroFator(ANumeroFator node);
    void caseAVNumValor(AVNumValor node);
    void caseAVFuncValor(AVFuncValor node);
    void caseAVExpressaoValor(AVExpressaoValor node);
    void caseAVStrValor(AVStrValor node);
    void caseANumeroIntNumeroOuFuncao(ANumeroIntNumeroOuFuncao node);
    void caseAFuncaoGeralNumeroOuFuncao(AFuncaoGeralNumeroOuFuncao node);
    void caseADimensoesRMatriz(ADimensoesRMatriz node);
    void caseADimensaoRMatriz(ADimensaoRMatriz node);
    void caseAMValoresValores(AMValoresValores node);
    void caseAUmValorValores(AUmValorValores node);
    void caseACParamChamaFuncao(ACParamChamaFuncao node);
    void caseASParamChamaFuncao(ASParamChamaFuncao node);
    void caseAComandosComandos(AComandosComandos node);
    void caseAComandoComandos(AComandoComandos node);
    void caseAChamaVarComando(AChamaVarComando node);
    void caseAChamaFuncComando(AChamaFuncComando node);
    void caseABlocoWhileComando(ABlocoWhileComando node);
    void caseABlocoIfComando(ABlocoIfComando node);
    void caseARetornoComando(ARetornoComando node);
    void caseARVoidRetorno(ARVoidRetorno node);
    void caseARIntRetorno(ARIntRetorno node);
    void caseARStrRetorno(ARStrRetorno node);
    void caseABlWhileBlocoWhile(ABlWhileBlocoWhile node);
    void caseACasaBlocoIf(ACasaBlocoIf node);
    void caseANaoCasaBlocoIf(ANaoCasaBlocoIf node);
    void caseAIfCasaDecl(AIfCasaDecl node);
    void caseAOutraCasaDecl(AOutraCasaDecl node);
    void caseAIfCasaDecl2(AIfCasaDecl2 node);
    void caseAOutraCasaDecl2(AOutraCasaDecl2 node);
    void caseAIfNaoCasaDecl(AIfNaoCasaDecl node);
    void caseACasaNaoCasaNaoCasaDecl(ACasaNaoCasaNaoCasaDecl node);
    void caseACondCondicao(ACondCondicao node);
    void caseAValor2(AValor2 node);

    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioE(TComentarioE node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTComentarioD(TComentarioD node);
    void caseTAsterisco(TAsterisco node);
    void caseTBarra(TBarra node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTReturn(TReturn node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTInput(TInput node);
    void caseTOutput(TOutput node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTStr(TStr node);
    void caseTBranco(TBranco node);
    void caseTSoma(TSoma node);
    void caseTMult(TMult node);
    void caseTComparador(TComparador node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTVirgula(TVirgula node);
    void caseTParenteseE(TParenteseE node);
    void caseTParenteseD(TParenteseD node);
    void caseTColcheteE(TColcheteE node);
    void caseTColcheteD(TColcheteD node);
    void caseTChaveE(TChaveE node);
    void caseTChaveD(TChaveD node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
