/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.analysis;

import java.util.*;
import Cmenos.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAListaPrograma(AListaPrograma node)
    {
        defaultIn(node);
    }

    public void outAListaPrograma(AListaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaPrograma(AListaPrograma node)
    {
        inAListaPrograma(node);
        if(node.getListaDeclaracoes() != null)
        {
            node.getListaDeclaracoes().apply(this);
        }
        outAListaPrograma(node);
    }

    public void inAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        inAListaListaDeclaracoes(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getListaDeclaracoes() != null)
        {
            node.getListaDeclaracoes().apply(this);
        }
        outAListaListaDeclaracoes(node);
    }

    public void inADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        inADeclaracaoListaDeclaracoes(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoListaDeclaracoes(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        inAFuncaoDeclaracao(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outAFuncaoDeclaracao(node);
    }

    public void inANulaVariavel(ANulaVariavel node)
    {
        defaultIn(node);
    }

    public void outANulaVariavel(ANulaVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANulaVariavel(ANulaVariavel node)
    {
        inANulaVariavel(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outANulaVariavel(node);
    }

    public void inAMatrizNulaVariavel(AMatrizNulaVariavel node)
    {
        defaultIn(node);
    }

    public void outAMatrizNulaVariavel(AMatrizNulaVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizNulaVariavel(AMatrizNulaVariavel node)
    {
        inAMatrizNulaVariavel(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAMatrizNulaVariavel(node);
    }

    public void inATVoidTipo(ATVoidTipo node)
    {
        defaultIn(node);
    }

    public void outATVoidTipo(ATVoidTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATVoidTipo(ATVoidTipo node)
    {
        inATVoidTipo(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outATVoidTipo(node);
    }

    public void inATIntTipo(ATIntTipo node)
    {
        defaultIn(node);
    }

    public void outATIntTipo(ATIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntTipo(ATIntTipo node)
    {
        inATIntTipo(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outATIntTipo(node);
    }

    public void inATStrTipo(ATStrTipo node)
    {
        defaultIn(node);
    }

    public void outATStrTipo(ATStrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATStrTipo(ATStrTipo node)
    {
        inATStrTipo(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outATStrTipo(node);
    }

    public void inAFuncaoFuncao(AFuncaoFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoFuncao(AFuncaoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoFuncao(AFuncaoFuncao node)
    {
        inAFuncaoFuncao(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAFuncaoFuncao(node);
    }

    public void inAListaParametros(AListaParametros node)
    {
        defaultIn(node);
    }

    public void outAListaParametros(AListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaParametros(AListaParametros node)
    {
        inAListaParametros(node);
        if(node.getListaParametros() != null)
        {
            node.getListaParametros().apply(this);
        }
        outAListaParametros(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAMParametrosListaParametros(AMParametrosListaParametros node)
    {
        defaultIn(node);
    }

    public void outAMParametrosListaParametros(AMParametrosListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMParametrosListaParametros(AMParametrosListaParametros node)
    {
        inAMParametrosListaParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getListaParametros() != null)
        {
            node.getListaParametros().apply(this);
        }
        outAMParametrosListaParametros(node);
    }

    public void inAParametroListaParametros(AParametroListaParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroListaParametros(AParametroListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroListaParametros(AParametroListaParametros node)
    {
        inAParametroListaParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroListaParametros(node);
    }

    public void inASimplesParametro(ASimplesParametro node)
    {
        defaultIn(node);
    }

    public void outASimplesParametro(ASimplesParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesParametro(ASimplesParametro node)
    {
        inASimplesParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outASimplesParametro(node);
    }

    public void inAMatrizParametro(AMatrizParametro node)
    {
        defaultIn(node);
    }

    public void outAMatrizParametro(AMatrizParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizParametro(AMatrizParametro node)
    {
        inAMatrizParametro(node);
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAMatrizParametro(node);
    }

    public void inADeclaracoesLocaisComandos(ADeclaracoesLocaisComandos node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesLocaisComandos(ADeclaracoesLocaisComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesLocaisComandos(ADeclaracoesLocaisComandos node)
    {
        inADeclaracoesLocaisComandos(node);
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        if(node.getListaComandos() != null)
        {
            node.getListaComandos().apply(this);
        }
        if(node.getDeclaracoesLocais() != null)
        {
            node.getDeclaracoesLocais().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        outADeclaracoesLocaisComandos(node);
    }

    public void inAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        defaultIn(node);
    }

    public void outAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        inAListaDeclaracoesLocais(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDeclaracoesLocais() != null)
        {
            node.getDeclaracoesLocais().apply(this);
        }
        outAListaDeclaracoesLocais(node);
    }

    public void inAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        defaultIn(node);
    }

    public void outAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        inAVazioDeclaracoesLocais(node);
        outAVazioDeclaracoesLocais(node);
    }

    public void inAListaListaComandos(AListaListaComandos node)
    {
        defaultIn(node);
    }

    public void outAListaListaComandos(AListaListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaComandos(AListaListaComandos node)
    {
        inAListaListaComandos(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getListaComandos() != null)
        {
            node.getListaComandos().apply(this);
        }
        outAListaListaComandos(node);
    }

    public void inAVazioListaComandos(AVazioListaComandos node)
    {
        defaultIn(node);
    }

    public void outAVazioListaComandos(AVazioListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaComandos(AVazioListaComandos node)
    {
        inAVazioListaComandos(node);
        outAVazioListaComandos(node);
    }

    public void inACExpressaoComando(ACExpressaoComando node)
    {
        defaultIn(node);
    }

    public void outACExpressaoComando(ACExpressaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACExpressaoComando(ACExpressaoComando node)
    {
        inACExpressaoComando(node);
        if(node.getCEspressao() != null)
        {
            node.getCEspressao().apply(this);
        }
        outACExpressaoComando(node);
    }

    public void inAComandosComando(AComandosComando node)
    {
        defaultIn(node);
    }

    public void outAComandosComando(AComandosComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandosComando(AComandosComando node)
    {
        inAComandosComando(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAComandosComando(node);
    }

    public void inABlocoIfComando(ABlocoIfComando node)
    {
        defaultIn(node);
    }

    public void outABlocoIfComando(ABlocoIfComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoIfComando(ABlocoIfComando node)
    {
        inABlocoIfComando(node);
        if(node.getBlocoIf() != null)
        {
            node.getBlocoIf().apply(this);
        }
        outABlocoIfComando(node);
    }

    public void inABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultIn(node);
    }

    public void outABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoWhileComando(ABlocoWhileComando node)
    {
        inABlocoWhileComando(node);
        if(node.getBlocoWhile() != null)
        {
            node.getBlocoWhile().apply(this);
        }
        outABlocoWhileComando(node);
    }

    public void inARetornoComando(ARetornoComando node)
    {
        defaultIn(node);
    }

    public void outARetornoComando(ARetornoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        inARetornoComando(node);
        if(node.getRetorno() != null)
        {
            node.getRetorno().apply(this);
        }
        outARetornoComando(node);
    }

    public void inAEspressaoCEspressao(AEspressaoCEspressao node)
    {
        defaultIn(node);
    }

    public void outAEspressaoCEspressao(AEspressaoCEspressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEspressaoCEspressao(AEspressaoCEspressao node)
    {
        inAEspressaoCEspressao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAEspressaoCEspressao(node);
    }

    public void inAVazioCEspressao(AVazioCEspressao node)
    {
        defaultIn(node);
    }

    public void outAVazioCEspressao(AVazioCEspressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioCEspressao(AVazioCEspressao node)
    {
        inAVazioCEspressao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVazioCEspressao(node);
    }

    public void inAIfBlocoIf(AIfBlocoIf node)
    {
        defaultIn(node);
    }

    public void outAIfBlocoIf(AIfBlocoIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfBlocoIf(AIfBlocoIf node)
    {
        inAIfBlocoIf(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfBlocoIf(node);
    }

    public void inABlocoWhile(ABlocoWhile node)
    {
        defaultIn(node);
    }

    public void outABlocoWhile(ABlocoWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoWhile(ABlocoWhile node)
    {
        inABlocoWhile(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outABlocoWhile(node);
    }

    public void inAVazioRetorno(AVazioRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioRetorno(AVazioRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioRetorno(AVazioRetorno node)
    {
        inAVazioRetorno(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAVazioRetorno(node);
    }

    public void inAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        defaultIn(node);
    }

    public void outAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        inAComExpressaoRetorno(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAComExpressaoRetorno(node);
    }

    public void inAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        inAAtribuicaoExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoExpressao(node);
    }

    public void inASimplesExpressao(ASimplesExpressao node)
    {
        defaultIn(node);
    }

    public void outASimplesExpressao(ASimplesExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesExpressao(ASimplesExpressao node)
    {
        inASimplesExpressao(node);
        if(node.getExpressaoSimples() != null)
        {
            node.getExpressaoSimples().apply(this);
        }
        outASimplesExpressao(node);
    }

    public void inAIdSimplesVar(AIdSimplesVar node)
    {
        defaultIn(node);
    }

    public void outAIdSimplesVar(AIdSimplesVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdSimplesVar(AIdSimplesVar node)
    {
        inAIdSimplesVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdSimplesVar(node);
    }

    public void inAIdExpressaoVar(AIdExpressaoVar node)
    {
        defaultIn(node);
    }

    public void outAIdExpressaoVar(AIdExpressaoVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpressaoVar(AIdExpressaoVar node)
    {
        inAIdExpressaoVar(node);
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExpressaoVar(node);
    }

    public void inAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        defaultIn(node);
    }

    public void outAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        inAComparativoExpressaoSimples(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getComparador() != null)
        {
            node.getComparador().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAComparativoExpressaoSimples(node);
    }

    public void inAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        defaultIn(node);
    }

    public void outAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        inAAditivaExpressaoSimples(node);
        if(node.getExpressaoAditiva() != null)
        {
            node.getExpressaoAditiva().apply(this);
        }
        outAAditivaExpressaoSimples(node);
    }

    public void inASomaExpressaoAditiva(ASomaExpressaoAditiva node)
    {
        defaultIn(node);
    }

    public void outASomaExpressaoAditiva(ASomaExpressaoAditiva node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpressaoAditiva(ASomaExpressaoAditiva node)
    {
        inASomaExpressaoAditiva(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpressaoAditiva() != null)
        {
            node.getExpressaoAditiva().apply(this);
        }
        outASomaExpressaoAditiva(node);
    }

    public void inATermoExpressaoAditiva(ATermoExpressaoAditiva node)
    {
        defaultIn(node);
    }

    public void outATermoExpressaoAditiva(ATermoExpressaoAditiva node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpressaoAditiva(ATermoExpressaoAditiva node)
    {
        inATermoExpressaoAditiva(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpressaoAditiva(node);
    }

    public void inAMultTermo(AMultTermo node)
    {
        defaultIn(node);
    }

    public void outAMultTermo(AMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        inAMultTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAEspressaoFator(AEspressaoFator node)
    {
        defaultIn(node);
    }

    public void outAEspressaoFator(AEspressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEspressaoFator(AEspressaoFator node)
    {
        inAEspressaoFator(node);
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        outAEspressaoFator(node);
    }

    public void inAVariavelFator(AVariavelFator node)
    {
        defaultIn(node);
    }

    public void outAVariavelFator(AVariavelFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        inAVariavelFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelFator(node);
    }

    public void inAChamadaFator(AChamadaFator node)
    {
        defaultIn(node);
    }

    public void outAChamadaFator(AChamadaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFator(AChamadaFator node)
    {
        inAChamadaFator(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaFator(node);
    }

    public void inANumeroFator(ANumeroFator node)
    {
        defaultIn(node);
    }

    public void outANumeroFator(ANumeroFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroFator(ANumeroFator node)
    {
        inANumeroFator(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumeroFator(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaArgs(AListaArgs node)
    {
        defaultIn(node);
    }

    public void outAListaArgs(AListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaArgs(AListaArgs node)
    {
        inAListaArgs(node);
        if(node.getListaArgs() != null)
        {
            node.getListaArgs().apply(this);
        }
        outAListaArgs(node);
    }

    public void inAVazioArgs(AVazioArgs node)
    {
        defaultIn(node);
    }

    public void outAVazioArgs(AVazioArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioArgs(AVazioArgs node)
    {
        inAVazioArgs(node);
        outAVazioArgs(node);
    }

    public void inAListaListaArgs(AListaListaArgs node)
    {
        defaultIn(node);
    }

    public void outAListaListaArgs(AListaListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaArgs(AListaListaArgs node)
    {
        inAListaListaArgs(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getListaArgs() != null)
        {
            node.getListaArgs().apply(this);
        }
        outAListaListaArgs(node);
    }

    public void inAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        defaultIn(node);
    }

    public void outAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        inAExpressaoListaArgs(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpressaoListaArgs(node);
    }
}
