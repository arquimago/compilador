/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.analysis;

import java.util.*;
import Cmenos.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaPrograma(AListaPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANulaVariavel(ANulaVariavel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatrizNulaVariavel(AMatrizNulaVariavel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATVoidTipo(ATVoidTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATIntTipo(ATIntTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATStrTipo(ATStrTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncaoFuncao(AFuncaoFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaParametros(AListaParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidParametros(AVoidParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMParametrosListaParametros(AMParametrosListaParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametroListaParametros(AParametroListaParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplesParametro(ASimplesParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatrizParametro(AMatrizParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracoesLocaisComandos(ADeclaracoesLocaisComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaListaComandos(AListaListaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioListaComandos(AVazioListaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACExpressaoComando(ACExpressaoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandosComando(AComandosComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoIfComando(ABlocoIfComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEspressaoCEspressao(AEspressaoCEspressao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioCEspressao(AVazioCEspressao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfBlocoIf(AIfBlocoIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoWhile(ABlocoWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioRetorno(AVazioRetorno node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplesExpressao(ASimplesExpressao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdSimplesVar(AIdSimplesVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdExpressaoVar(AIdExpressaoVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASomaExpressaoAditiva(ASomaExpressaoAditiva node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermoExpressaoAditiva(ATermoExpressaoAditiva node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEspressaoFator(AEspressaoFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaFator(AChamadaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeroFator(ANumeroFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaArgs(AListaArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioArgs(AVazioArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaListaArgs(AListaListaArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioLinha(TComentarioLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioE(TComentarioE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioCorpo(TComentarioCorpo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioD(TComentarioD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAsterisco(TAsterisco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarra(TBarra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInput(TInput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOutput(TOutput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStr(TStr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBranco(TBranco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComparador(TComparador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenteseE(TParenteseE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenteseD(TParenteseD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteE(TColcheteE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteD(TColcheteD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveE(TChaveE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveD(TChaveD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
