/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.analysis;

import java.util.*;
import Cmenos.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAListaPrograma(AListaPrograma node)
    {
        defaultIn(node);
    }

    public void outAListaPrograma(AListaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaPrograma(AListaPrograma node)
    {
        inAListaPrograma(node);
        if(node.getListaDeclaracoes() != null)
        {
            node.getListaDeclaracoes().apply(this);
        }
        outAListaPrograma(node);
    }

    public void inAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaDeclaracoes(AListaListaDeclaracoes node)
    {
        inAListaListaDeclaracoes(node);
        if(node.getListaDeclaracoes() != null)
        {
            node.getListaDeclaracoes().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outAListaListaDeclaracoes(node);
    }

    public void inADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoListaDeclaracoes(ADeclaracaoListaDeclaracoes node)
    {
        inADeclaracaoListaDeclaracoes(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoListaDeclaracoes(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getVariavelDec() != null)
        {
            node.getVariavelDec().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        inAFuncaoDeclaracao(node);
        if(node.getFuncaoDec() != null)
        {
            node.getFuncaoDec().apply(this);
        }
        outAFuncaoDeclaracao(node);
    }

    public void inAVariavelDec(AVariavelDec node)
    {
        defaultIn(node);
    }

    public void outAVariavelDec(AVariavelDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDec(AVariavelDec node)
    {
        inAVariavelDec(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVariavelDec(node);
    }

    public void inATVoidTipo(ATVoidTipo node)
    {
        defaultIn(node);
    }

    public void outATVoidTipo(ATVoidTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATVoidTipo(ATVoidTipo node)
    {
        inATVoidTipo(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outATVoidTipo(node);
    }

    public void inATIntTipo(ATIntTipo node)
    {
        defaultIn(node);
    }

    public void outATIntTipo(ATIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntTipo(ATIntTipo node)
    {
        inATIntTipo(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outATIntTipo(node);
    }

    public void inATStrTipo(ATStrTipo node)
    {
        defaultIn(node);
    }

    public void outATStrTipo(ATStrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATStrTipo(ATStrTipo node)
    {
        inATStrTipo(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outATStrTipo(node);
    }

    public void inAFuncaoDec(AFuncaoDec node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDec(AFuncaoDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDec(AFuncaoDec node)
    {
        inAFuncaoDec(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCompostoDec() != null)
        {
            node.getCompostoDec().apply(this);
        }
        outAFuncaoDec(node);
    }

    public void inAListaParametros(AListaParametros node)
    {
        defaultIn(node);
    }

    public void outAListaParametros(AListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaParametros(AListaParametros node)
    {
        inAListaParametros(node);
        if(node.getListaParametros() != null)
        {
            node.getListaParametros().apply(this);
        }
        outAListaParametros(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVazioParametros(node);
    }

    public void inAParametrosListaParametros(AParametrosListaParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosListaParametros(AParametrosListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosListaParametros(AParametrosListaParametros node)
    {
        inAParametrosListaParametros(node);
        if(node.getListaParametros() != null)
        {
            node.getListaParametros().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametrosListaParametros(node);
    }

    public void inAParametroListaParametros(AParametroListaParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroListaParametros(AParametroListaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroListaParametros(AParametroListaParametros node)
    {
        inAParametroListaParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroListaParametros(node);
    }

    public void inASimplesParametro(ASimplesParametro node)
    {
        defaultIn(node);
    }

    public void outASimplesParametro(ASimplesParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesParametro(ASimplesParametro node)
    {
        inASimplesParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASimplesParametro(node);
    }

    public void inAMatrizParametro(AMatrizParametro node)
    {
        defaultIn(node);
    }

    public void outAMatrizParametro(AMatrizParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizParametro(AMatrizParametro node)
    {
        inAMatrizParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParray() != null)
        {
            node.getParray().apply(this);
        }
        outAMatrizParametro(node);
    }

    public void inABaseParray(ABaseParray node)
    {
        defaultIn(node);
    }

    public void outABaseParray(ABaseParray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseParray(ABaseParray node)
    {
        inABaseParray(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outABaseParray(node);
    }

    public void inAGeralParray(AGeralParray node)
    {
        defaultIn(node);
    }

    public void outAGeralParray(AGeralParray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeralParray(AGeralParray node)
    {
        inAGeralParray(node);
        if(node.getParray() != null)
        {
            node.getParray().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAGeralParray(node);
    }

    public void inADeclaracoesLocaisCompostoDec(ADeclaracoesLocaisCompostoDec node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesLocaisCompostoDec(ADeclaracoesLocaisCompostoDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesLocaisCompostoDec(ADeclaracoesLocaisCompostoDec node)
    {
        inADeclaracoesLocaisCompostoDec(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getDeclaracoesLocais() != null)
        {
            node.getDeclaracoesLocais().apply(this);
        }
        if(node.getListaComandos() != null)
        {
            node.getListaComandos().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outADeclaracoesLocaisCompostoDec(node);
    }

    public void inAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        defaultIn(node);
    }

    public void outAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDeclaracoesLocais(AListaDeclaracoesLocais node)
    {
        inAListaDeclaracoesLocais(node);
        if(node.getDeclaracoesLocais() != null)
        {
            node.getDeclaracoesLocais().apply(this);
        }
        if(node.getVariavelDec() != null)
        {
            node.getVariavelDec().apply(this);
        }
        outAListaDeclaracoesLocais(node);
    }

    public void inAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        defaultIn(node);
    }

    public void outAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioDeclaracoesLocais(AVazioDeclaracoesLocais node)
    {
        inAVazioDeclaracoesLocais(node);
        outAVazioDeclaracoesLocais(node);
    }

    public void inAListaListaComandos(AListaListaComandos node)
    {
        defaultIn(node);
    }

    public void outAListaListaComandos(AListaListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaComandos(AListaListaComandos node)
    {
        inAListaListaComandos(node);
        if(node.getListaComandos() != null)
        {
            node.getListaComandos().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAListaListaComandos(node);
    }

    public void inAVazioListaComandos(AVazioListaComandos node)
    {
        defaultIn(node);
    }

    public void outAVazioListaComandos(AVazioListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaComandos(AVazioListaComandos node)
    {
        inAVazioListaComandos(node);
        outAVazioListaComandos(node);
    }

    public void inAExpressaoComando(AExpressaoComando node)
    {
        defaultIn(node);
    }

    public void outAExpressaoComando(AExpressaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoComando(AExpressaoComando node)
    {
        inAExpressaoComando(node);
        if(node.getEspressaoDec() != null)
        {
            node.getEspressaoDec().apply(this);
        }
        outAExpressaoComando(node);
    }

    public void inAComandosComando(AComandosComando node)
    {
        defaultIn(node);
    }

    public void outAComandosComando(AComandosComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandosComando(AComandosComando node)
    {
        inAComandosComando(node);
        if(node.getCompostoDec() != null)
        {
            node.getCompostoDec().apply(this);
        }
        outAComandosComando(node);
    }

    public void inAIfComando(AIfComando node)
    {
        defaultIn(node);
    }

    public void outAIfComando(AIfComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfComando(AIfComando node)
    {
        inAIfComando(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCompostoDec() != null)
        {
            node.getCompostoDec().apply(this);
        }
        outAIfComando(node);
    }

    public void inAIfThenElseComando(AIfThenElseComando node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseComando(AIfThenElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseComando(AIfThenElseComando node)
    {
        inAIfThenElseComando(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getV() != null)
        {
            node.getV().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAIfThenElseComando(node);
    }

    public void inAIfElseComando(AIfElseComando node)
    {
        defaultIn(node);
    }

    public void outAIfElseComando(AIfElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseComando(AIfElseComando node)
    {
        inAIfElseComando(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getCompostoDec() != null)
        {
            node.getCompostoDec().apply(this);
        }
        outAIfElseComando(node);
    }

    public void inABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultIn(node);
    }

    public void outABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoWhileComando(ABlocoWhileComando node)
    {
        inABlocoWhileComando(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCompostoDec() != null)
        {
            node.getCompostoDec().apply(this);
        }
        outABlocoWhileComando(node);
    }

    public void inARetornoComando(ARetornoComando node)
    {
        defaultIn(node);
    }

    public void outARetornoComando(ARetornoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        inARetornoComando(node);
        if(node.getRetorno() != null)
        {
            node.getRetorno().apply(this);
        }
        outARetornoComando(node);
    }

    public void inAEspressaoEspressaoDec(AEspressaoEspressaoDec node)
    {
        defaultIn(node);
    }

    public void outAEspressaoEspressaoDec(AEspressaoEspressaoDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEspressaoEspressaoDec(AEspressaoEspressaoDec node)
    {
        inAEspressaoEspressaoDec(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAEspressaoEspressaoDec(node);
    }

    public void inAVazioEspressaoDec(AVazioEspressaoDec node)
    {
        defaultIn(node);
    }

    public void outAVazioEspressaoDec(AVazioEspressaoDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioEspressaoDec(AVazioEspressaoDec node)
    {
        inAVazioEspressaoDec(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVazioEspressaoDec(node);
    }

    public void inAVazioRetorno(AVazioRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioRetorno(AVazioRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioRetorno(AVazioRetorno node)
    {
        inAVazioRetorno(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVazioRetorno(node);
    }

    public void inAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        defaultIn(node);
    }

    public void outAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComExpressaoRetorno(AComExpressaoRetorno node)
    {
        inAComExpressaoRetorno(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComExpressaoRetorno(node);
    }

    public void inAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoExpressao(AAtribuicaoExpressao node)
    {
        inAAtribuicaoExpressao(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAAtribuicaoExpressao(node);
    }

    public void inAAtribuicaoStrExpressao(AAtribuicaoStrExpressao node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoStrExpressao(AAtribuicaoStrExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoStrExpressao(AAtribuicaoStrExpressao node)
    {
        inAAtribuicaoStrExpressao(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outAAtribuicaoStrExpressao(node);
    }

    public void inASimplesExpressao(ASimplesExpressao node)
    {
        defaultIn(node);
    }

    public void outASimplesExpressao(ASimplesExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesExpressao(ASimplesExpressao node)
    {
        inASimplesExpressao(node);
        if(node.getExpressaoSimples() != null)
        {
            node.getExpressaoSimples().apply(this);
        }
        outASimplesExpressao(node);
    }

    public void inAIdSimplesVar(AIdSimplesVar node)
    {
        defaultIn(node);
    }

    public void outAIdSimplesVar(AIdSimplesVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdSimplesVar(AIdSimplesVar node)
    {
        inAIdSimplesVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdSimplesVar(node);
    }

    public void inAIdArrayVar(AIdArrayVar node)
    {
        defaultIn(node);
    }

    public void outAIdArrayVar(AIdArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayVar(AIdArrayVar node)
    {
        inAIdArrayVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAIdArrayVar(node);
    }

    public void inAArrayMultiploArray(AArrayMultiploArray node)
    {
        defaultIn(node);
    }

    public void outAArrayMultiploArray(AArrayMultiploArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayMultiploArray(AArrayMultiploArray node)
    {
        inAArrayMultiploArray(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAArrayMultiploArray(node);
    }

    public void inAArrayBaseArray(AArrayBaseArray node)
    {
        defaultIn(node);
    }

    public void outAArrayBaseArray(AArrayBaseArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayBaseArray(AArrayBaseArray node)
    {
        inAArrayBaseArray(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAArrayBaseArray(node);
    }

    public void inAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        defaultIn(node);
    }

    public void outAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparativoExpressaoSimples(AComparativoExpressaoSimples node)
    {
        inAComparativoExpressaoSimples(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getComparacao() != null)
        {
            node.getComparacao().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAComparativoExpressaoSimples(node);
    }

    public void inAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        defaultIn(node);
    }

    public void outAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAditivaExpressaoSimples(AAditivaExpressaoSimples node)
    {
        inAAditivaExpressaoSimples(node);
        if(node.getSomaExpressao() != null)
        {
            node.getSomaExpressao().apply(this);
        }
        outAAditivaExpressaoSimples(node);
    }

    public void inAMenorComparacao(AMenorComparacao node)
    {
        defaultIn(node);
    }

    public void outAMenorComparacao(AMenorComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorComparacao(AMenorComparacao node)
    {
        inAMenorComparacao(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorComparacao(node);
    }

    public void inAMenorigualComparacao(AMenorigualComparacao node)
    {
        defaultIn(node);
    }

    public void outAMenorigualComparacao(AMenorigualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualComparacao(AMenorigualComparacao node)
    {
        inAMenorigualComparacao(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorigualComparacao(node);
    }

    public void inAMaiorComparacao(AMaiorComparacao node)
    {
        defaultIn(node);
    }

    public void outAMaiorComparacao(AMaiorComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorComparacao(AMaiorComparacao node)
    {
        inAMaiorComparacao(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorComparacao(node);
    }

    public void inAMaiorigualComparacao(AMaiorigualComparacao node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualComparacao(AMaiorigualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualComparacao(AMaiorigualComparacao node)
    {
        inAMaiorigualComparacao(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorigualComparacao(node);
    }

    public void inAIgualComparacao(AIgualComparacao node)
    {
        defaultIn(node);
    }

    public void outAIgualComparacao(AIgualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualComparacao(AIgualComparacao node)
    {
        inAIgualComparacao(node);
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        outAIgualComparacao(node);
    }

    public void inADifComparacao(ADifComparacao node)
    {
        defaultIn(node);
    }

    public void outADifComparacao(ADifComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifComparacao(ADifComparacao node)
    {
        inADifComparacao(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADifComparacao(node);
    }

    public void inASomaSomaExpressao(ASomaSomaExpressao node)
    {
        defaultIn(node);
    }

    public void outASomaSomaExpressao(ASomaSomaExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaSomaExpressao(ASomaSomaExpressao node)
    {
        inASomaSomaExpressao(node);
        if(node.getSomaExpressao() != null)
        {
            node.getSomaExpressao().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASomaSomaExpressao(node);
    }

    public void inASubtracaoSomaExpressao(ASubtracaoSomaExpressao node)
    {
        defaultIn(node);
    }

    public void outASubtracaoSomaExpressao(ASubtracaoSomaExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoSomaExpressao(ASubtracaoSomaExpressao node)
    {
        inASubtracaoSomaExpressao(node);
        if(node.getSomaExpressao() != null)
        {
            node.getSomaExpressao().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASubtracaoSomaExpressao(node);
    }

    public void inATermoSomaExpressao(ATermoSomaExpressao node)
    {
        defaultIn(node);
    }

    public void outATermoSomaExpressao(ATermoSomaExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoSomaExpressao(ATermoSomaExpressao node)
    {
        inATermoSomaExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoSomaExpressao(node);
    }

    public void inAMultTermo(AMultTermo node)
    {
        defaultIn(node);
    }

    public void outAMultTermo(AMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        inAMultTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultTermo(node);
    }

    public void inADivTermo(ADivTermo node)
    {
        defaultIn(node);
    }

    public void outADivTermo(ADivTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTermo(ADivTermo node)
    {
        inADivTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAEspressaoFator(AEspressaoFator node)
    {
        defaultIn(node);
    }

    public void outAEspressaoFator(AEspressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEspressaoFator(AEspressaoFator node)
    {
        inAEspressaoFator(node);
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outAEspressaoFator(node);
    }

    public void inAVariavelFator(AVariavelFator node)
    {
        defaultIn(node);
    }

    public void outAVariavelFator(AVariavelFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        inAVariavelFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelFator(node);
    }

    public void inAChamadaFator(AChamadaFator node)
    {
        defaultIn(node);
    }

    public void outAChamadaFator(AChamadaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFator(AChamadaFator node)
    {
        inAChamadaFator(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaFator(node);
    }

    public void inANumeroFator(ANumeroFator node)
    {
        defaultIn(node);
    }

    public void outANumeroFator(ANumeroFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroFator(ANumeroFator node)
    {
        inANumeroFator(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumeroFator(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getIdfunc() != null)
        {
            node.getIdfunc().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaArgs(AListaArgs node)
    {
        defaultIn(node);
    }

    public void outAListaArgs(AListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaArgs(AListaArgs node)
    {
        inAListaArgs(node);
        if(node.getListaArgs() != null)
        {
            node.getListaArgs().apply(this);
        }
        outAListaArgs(node);
    }

    public void inAVazioArgs(AVazioArgs node)
    {
        defaultIn(node);
    }

    public void outAVazioArgs(AVazioArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioArgs(AVazioArgs node)
    {
        inAVazioArgs(node);
        outAVazioArgs(node);
    }

    public void inAListaListaArgs(AListaListaArgs node)
    {
        defaultIn(node);
    }

    public void outAListaListaArgs(AListaListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaArgs(AListaListaArgs node)
    {
        inAListaListaArgs(node);
        if(node.getListaArgs() != null)
        {
            node.getListaArgs().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAListaListaArgs(node);
    }

    public void inAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        defaultIn(node);
    }

    public void outAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoListaArgs(AExpressaoListaArgs node)
    {
        inAExpressaoListaArgs(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpressaoListaArgs(node);
    }
}
