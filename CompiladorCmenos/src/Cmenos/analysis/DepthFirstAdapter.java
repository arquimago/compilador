/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.analysis;

import java.util.*;
import Cmenos.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        inADeclaracoesPrograma(node);
        if(node.getDeclaracoes() != null)
        {
            node.getDeclaracoes().apply(this);
        }
        outADeclaracoesPrograma(node);
    }

    public void inAListaDeclaracoes(AListaDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAListaDeclaracoes(AListaDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDeclaracoes(AListaDeclaracoes node)
    {
        inAListaDeclaracoes(node);
        if(node.getDeclaracoes() != null)
        {
            node.getDeclaracoes().apply(this);
        }
        if(node.getSDeclaracao() != null)
        {
            node.getSDeclaracao().apply(this);
        }
        outAListaDeclaracoes(node);
    }

    public void inASDeclaracaoDeclaracoes(ASDeclaracaoDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outASDeclaracaoDeclaracoes(ASDeclaracaoDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASDeclaracaoDeclaracoes(ASDeclaracaoDeclaracoes node)
    {
        inASDeclaracaoDeclaracoes(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getSDeclaracao() != null)
        {
            node.getSDeclaracao().apply(this);
        }
        outASDeclaracaoDeclaracoes(node);
    }

    public void inAFuncaoCParamSDeclaracao(AFuncaoCParamSDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoCParamSDeclaracao(AFuncaoCParamSDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoCParamSDeclaracao(AFuncaoCParamSDeclaracao node)
    {
        inAFuncaoCParamSDeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAFuncaoCParamSDeclaracao(node);
    }

    public void inAFuncaoSParamSDeclaracao(AFuncaoSParamSDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoSParamSDeclaracao(AFuncaoSParamSDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoSParamSDeclaracao(AFuncaoSParamSDeclaracao node)
    {
        inAFuncaoSParamSDeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAFuncaoSParamSDeclaracao(node);
    }

    public void inAVariavelSDeclaracao(AVariavelSDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelSDeclaracao(AVariavelSDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelSDeclaracao(AVariavelSDeclaracao node)
    {
        inAVariavelSDeclaracao(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelSDeclaracao(node);
    }

    public void inANulaVar(ANulaVar node)
    {
        defaultIn(node);
    }

    public void outANulaVar(ANulaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANulaVar(ANulaVar node)
    {
        inANulaVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outANulaVar(node);
    }

    public void inAAtribuidaVar(AAtribuidaVar node)
    {
        defaultIn(node);
    }

    public void outAAtribuidaVar(AAtribuidaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuidaVar(AAtribuidaVar node)
    {
        inAAtribuidaVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAAtribuidaVar(node);
    }

    public void inAMatrizNulaVar(AMatrizNulaVar node)
    {
        defaultIn(node);
    }

    public void outAMatrizNulaVar(AMatrizNulaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizNulaVar(AMatrizNulaVar node)
    {
        inAMatrizNulaVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRMatriz() != null)
        {
            node.getRMatriz().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAMatrizNulaVar(node);
    }

    public void inAMatrizAtribuidaVar(AMatrizAtribuidaVar node)
    {
        defaultIn(node);
    }

    public void outAMatrizAtribuidaVar(AMatrizAtribuidaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizAtribuidaVar(AMatrizAtribuidaVar node)
    {
        inAMatrizAtribuidaVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRMatriz() != null)
        {
            node.getRMatriz().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getValores() != null)
        {
            node.getValores().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAMatrizAtribuidaVar(node);
    }

    public void inATVoidTipo(ATVoidTipo node)
    {
        defaultIn(node);
    }

    public void outATVoidTipo(ATVoidTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATVoidTipo(ATVoidTipo node)
    {
        inATVoidTipo(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outATVoidTipo(node);
    }

    public void inATIntTipo(ATIntTipo node)
    {
        defaultIn(node);
    }

    public void outATIntTipo(ATIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntTipo(ATIntTipo node)
    {
        inATIntTipo(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outATIntTipo(node);
    }

    public void inATStrTipo(ATStrTipo node)
    {
        defaultIn(node);
    }

    public void outATStrTipo(ATStrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATStrTipo(ATStrTipo node)
    {
        inATStrTipo(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outATStrTipo(node);
    }

    public void inAMParametrosParametros(AMParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAMParametrosParametros(AMParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMParametrosParametros(AMParametrosParametros node)
    {
        inAMParametrosParametros(node);
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAMParametrosParametros(node);
    }

    public void inAParametroParametros(AParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroParametros(AParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametros(AParametroParametros node)
    {
        inAParametroParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroParametros(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inAExpressaoExpressao(AExpressaoExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpressaoExpressao(AExpressaoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoExpressao(AExpressaoExpressao node)
    {
        inAExpressaoExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAExpressaoExpressao(node);
    }

    public void inATermExpressao(ATermExpressao node)
    {
        defaultIn(node);
    }

    public void outATermExpressao(ATermExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpressao(ATermExpressao node)
    {
        inATermExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermExpressao(node);
    }

    public void inATTermo(ATTermo node)
    {
        defaultIn(node);
    }

    public void outATTermo(ATTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATTermo(ATTermo node)
    {
        inATTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outATTermo(node);
    }

    public void inAFatTermo(AFatTermo node)
    {
        defaultIn(node);
    }

    public void outAFatTermo(AFatTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermo(AFatTermo node)
    {
        inAFatTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatTermo(node);
    }

    public void inAFFator(AFFator node)
    {
        defaultIn(node);
    }

    public void outAFFator(AFFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFFator(AFFator node)
    {
        inAFFator(node);
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outAFFator(node);
    }

    public void inANumeroFator(ANumeroFator node)
    {
        defaultIn(node);
    }

    public void outANumeroFator(ANumeroFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroFator(ANumeroFator node)
    {
        inANumeroFator(node);
        if(node.getNumeroOuFuncao() != null)
        {
            node.getNumeroOuFuncao().apply(this);
        }
        outANumeroFator(node);
    }

    public void inAVNumValor(AVNumValor node)
    {
        defaultIn(node);
    }

    public void outAVNumValor(AVNumValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVNumValor(AVNumValor node)
    {
        inAVNumValor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outAVNumValor(node);
    }

    public void inAVFuncValor(AVFuncValor node)
    {
        defaultIn(node);
    }

    public void outAVFuncValor(AVFuncValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVFuncValor(AVFuncValor node)
    {
        inAVFuncValor(node);
        if(node.getChamaFuncao() != null)
        {
            node.getChamaFuncao().apply(this);
        }
        outAVFuncValor(node);
    }

    public void inAVExpressaoValor(AVExpressaoValor node)
    {
        defaultIn(node);
    }

    public void outAVExpressaoValor(AVExpressaoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVExpressaoValor(AVExpressaoValor node)
    {
        inAVExpressaoValor(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAVExpressaoValor(node);
    }

    public void inAVStrValor(AVStrValor node)
    {
        defaultIn(node);
    }

    public void outAVStrValor(AVStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVStrValor(AVStrValor node)
    {
        inAVStrValor(node);
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outAVStrValor(node);
    }

    public void inANumeroIntNumeroOuFuncao(ANumeroIntNumeroOuFuncao node)
    {
        defaultIn(node);
    }

    public void outANumeroIntNumeroOuFuncao(ANumeroIntNumeroOuFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroIntNumeroOuFuncao(ANumeroIntNumeroOuFuncao node)
    {
        inANumeroIntNumeroOuFuncao(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumeroIntNumeroOuFuncao(node);
    }

    public void inAFuncaoGeralNumeroOuFuncao(AFuncaoGeralNumeroOuFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoGeralNumeroOuFuncao(AFuncaoGeralNumeroOuFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoGeralNumeroOuFuncao(AFuncaoGeralNumeroOuFuncao node)
    {
        inAFuncaoGeralNumeroOuFuncao(node);
        if(node.getChamaFuncao() != null)
        {
            node.getChamaFuncao().apply(this);
        }
        outAFuncaoGeralNumeroOuFuncao(node);
    }

    public void inADimensoesRMatriz(ADimensoesRMatriz node)
    {
        defaultIn(node);
    }

    public void outADimensoesRMatriz(ADimensoesRMatriz node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADimensoesRMatriz(ADimensoesRMatriz node)
    {
        inADimensoesRMatriz(node);
        if(node.getRMatriz() != null)
        {
            node.getRMatriz().apply(this);
        }
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getNumeroOuFuncao() != null)
        {
            node.getNumeroOuFuncao().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outADimensoesRMatriz(node);
    }

    public void inADimensaoRMatriz(ADimensaoRMatriz node)
    {
        defaultIn(node);
    }

    public void outADimensaoRMatriz(ADimensaoRMatriz node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADimensaoRMatriz(ADimensaoRMatriz node)
    {
        inADimensaoRMatriz(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getNumeroOuFuncao() != null)
        {
            node.getNumeroOuFuncao().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outADimensaoRMatriz(node);
    }

    public void inAMValoresValores(AMValoresValores node)
    {
        defaultIn(node);
    }

    public void outAMValoresValores(AMValoresValores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMValoresValores(AMValoresValores node)
    {
        inAMValoresValores(node);
        if(node.getValores() != null)
        {
            node.getValores().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAMValoresValores(node);
    }

    public void inAUmValorValores(AUmValorValores node)
    {
        defaultIn(node);
    }

    public void outAUmValorValores(AUmValorValores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmValorValores(AUmValorValores node)
    {
        inAUmValorValores(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAUmValorValores(node);
    }

    public void inACParamChamaFuncao(ACParamChamaFuncao node)
    {
        defaultIn(node);
    }

    public void outACParamChamaFuncao(ACParamChamaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACParamChamaFuncao(ACParamChamaFuncao node)
    {
        inACParamChamaFuncao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getValores() != null)
        {
            node.getValores().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outACParamChamaFuncao(node);
    }

    public void inASParamChamaFuncao(ASParamChamaFuncao node)
    {
        defaultIn(node);
    }

    public void outASParamChamaFuncao(ASParamChamaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASParamChamaFuncao(ASParamChamaFuncao node)
    {
        inASParamChamaFuncao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outASParamChamaFuncao(node);
    }

    public void inAComandosComandos(AComandosComandos node)
    {
        defaultIn(node);
    }

    public void outAComandosComandos(AComandosComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandosComandos(AComandosComandos node)
    {
        inAComandosComandos(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandosComandos(node);
    }

    public void inAComandoComandos(AComandoComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoComandos(AComandoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandos(AComandoComandos node)
    {
        inAComandoComandos(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandos(node);
    }

    public void inAChamaVarComando(AChamaVarComando node)
    {
        defaultIn(node);
    }

    public void outAChamaVarComando(AChamaVarComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamaVarComando(AChamaVarComando node)
    {
        inAChamaVarComando(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAChamaVarComando(node);
    }

    public void inAChamaFuncComando(AChamaFuncComando node)
    {
        defaultIn(node);
    }

    public void outAChamaFuncComando(AChamaFuncComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamaFuncComando(AChamaFuncComando node)
    {
        inAChamaFuncComando(node);
        if(node.getChamaFuncao() != null)
        {
            node.getChamaFuncao().apply(this);
        }
        outAChamaFuncComando(node);
    }

    public void inABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultIn(node);
    }

    public void outABlocoWhileComando(ABlocoWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoWhileComando(ABlocoWhileComando node)
    {
        inABlocoWhileComando(node);
        if(node.getBlocoWhile() != null)
        {
            node.getBlocoWhile().apply(this);
        }
        outABlocoWhileComando(node);
    }

    public void inABlocoIfComando(ABlocoIfComando node)
    {
        defaultIn(node);
    }

    public void outABlocoIfComando(ABlocoIfComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoIfComando(ABlocoIfComando node)
    {
        inABlocoIfComando(node);
        if(node.getBlocoIf() != null)
        {
            node.getBlocoIf().apply(this);
        }
        outABlocoIfComando(node);
    }

    public void inARetornoComando(ARetornoComando node)
    {
        defaultIn(node);
    }

    public void outARetornoComando(ARetornoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        inARetornoComando(node);
        if(node.getRetorno() != null)
        {
            node.getRetorno().apply(this);
        }
        outARetornoComando(node);
    }

    public void inARVoidRetorno(ARVoidRetorno node)
    {
        defaultIn(node);
    }

    public void outARVoidRetorno(ARVoidRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARVoidRetorno(ARVoidRetorno node)
    {
        inARVoidRetorno(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outARVoidRetorno(node);
    }

    public void inARIntRetorno(ARIntRetorno node)
    {
        defaultIn(node);
    }

    public void outARIntRetorno(ARIntRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARIntRetorno(ARIntRetorno node)
    {
        inARIntRetorno(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outARIntRetorno(node);
    }

    public void inARStrRetorno(ARStrRetorno node)
    {
        defaultIn(node);
    }

    public void outARStrRetorno(ARStrRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARStrRetorno(ARStrRetorno node)
    {
        inARStrRetorno(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outARStrRetorno(node);
    }

    public void inABlWhileBlocoWhile(ABlWhileBlocoWhile node)
    {
        defaultIn(node);
    }

    public void outABlWhileBlocoWhile(ABlWhileBlocoWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlWhileBlocoWhile(ABlWhileBlocoWhile node)
    {
        inABlWhileBlocoWhile(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outABlWhileBlocoWhile(node);
    }

    public void inACasaBlocoIf(ACasaBlocoIf node)
    {
        defaultIn(node);
    }

    public void outACasaBlocoIf(ACasaBlocoIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasaBlocoIf(ACasaBlocoIf node)
    {
        inACasaBlocoIf(node);
        if(node.getCasaDecl() != null)
        {
            node.getCasaDecl().apply(this);
        }
        outACasaBlocoIf(node);
    }

    public void inANaoCasaBlocoIf(ANaoCasaBlocoIf node)
    {
        defaultIn(node);
    }

    public void outANaoCasaBlocoIf(ANaoCasaBlocoIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoCasaBlocoIf(ANaoCasaBlocoIf node)
    {
        inANaoCasaBlocoIf(node);
        if(node.getNaoCasaDecl() != null)
        {
            node.getNaoCasaDecl().apply(this);
        }
        outANaoCasaBlocoIf(node);
    }

    public void inAIfCasaDecl(AIfCasaDecl node)
    {
        defaultIn(node);
    }

    public void outAIfCasaDecl(AIfCasaDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCasaDecl(AIfCasaDecl node)
    {
        inAIfCasaDecl(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCasaDecl2() != null)
        {
            node.getCasaDecl2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getCasaDecl() != null)
        {
            node.getCasaDecl().apply(this);
        }
        outAIfCasaDecl(node);
    }

    public void inAOutraCasaDecl(AOutraCasaDecl node)
    {
        defaultIn(node);
    }

    public void outAOutraCasaDecl(AOutraCasaDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraCasaDecl(AOutraCasaDecl node)
    {
        inAOutraCasaDecl(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outAOutraCasaDecl(node);
    }

    public void inAIfCasaDecl2(AIfCasaDecl2 node)
    {
        defaultIn(node);
    }

    public void outAIfCasaDecl2(AIfCasaDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCasaDecl2(AIfCasaDecl2 node)
    {
        inAIfCasaDecl2(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCasaDecl2() != null)
        {
            node.getCasaDecl2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getCasaDecl() != null)
        {
            node.getCasaDecl().apply(this);
        }
        outAIfCasaDecl2(node);
    }

    public void inAOutraCasaDecl2(AOutraCasaDecl2 node)
    {
        defaultIn(node);
    }

    public void outAOutraCasaDecl2(AOutraCasaDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraCasaDecl2(AOutraCasaDecl2 node)
    {
        inAOutraCasaDecl2(node);
        if(node.getChaveE() != null)
        {
            node.getChaveE().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getChaveD() != null)
        {
            node.getChaveD().apply(this);
        }
        outAOutraCasaDecl2(node);
    }

    public void inAIfNaoCasaDecl(AIfNaoCasaDecl node)
    {
        defaultIn(node);
    }

    public void outAIfNaoCasaDecl(AIfNaoCasaDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfNaoCasaDecl(AIfNaoCasaDecl node)
    {
        inAIfNaoCasaDecl(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getBlocoIf() != null)
        {
            node.getBlocoIf().apply(this);
        }
        outAIfNaoCasaDecl(node);
    }

    public void inACasaNaoCasaNaoCasaDecl(ACasaNaoCasaNaoCasaDecl node)
    {
        defaultIn(node);
    }

    public void outACasaNaoCasaNaoCasaDecl(ACasaNaoCasaNaoCasaDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasaNaoCasaNaoCasaDecl(ACasaNaoCasaNaoCasaDecl node)
    {
        inACasaNaoCasaNaoCasaDecl(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getCasaDecl() != null)
        {
            node.getCasaDecl().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getNaoCasaDecl() != null)
        {
            node.getNaoCasaDecl().apply(this);
        }
        outACasaNaoCasaNaoCasaDecl(node);
    }

    public void inACondCondicao(ACondCondicao node)
    {
        defaultIn(node);
    }

    public void outACondCondicao(ACondCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondicao(ACondCondicao node)
    {
        inACondCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getComparador() != null)
        {
            node.getComparador().apply(this);
        }
        if(node.getValor2() != null)
        {
            node.getValor2().apply(this);
        }
        outACondCondicao(node);
    }

    public void inAValor2(AValor2 node)
    {
        defaultIn(node);
    }

    public void outAValor2(AValor2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValor2(AValor2 node)
    {
        inAValor2(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValor2(node);
    }
}
