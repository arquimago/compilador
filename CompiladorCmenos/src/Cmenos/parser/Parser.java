/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.parser;

import Cmenos.lexer.*;
import Cmenos.node.*;
import Cmenos.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AVariavelDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AFuncaoDecDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AMainDec */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ATVoidTipo */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ATIntTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ATStrTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AListaParametros */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AVazioParametros */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AParametrosListaParametros */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AParametroListaParametros */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ASimplesParametro */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AMatrizParametro */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ABaseParray */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AGeralParray */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce ACompostoDec */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AListaDeclaracoesLocais */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AVazioDeclaracoesLocais */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AListaListaComandos */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AExpressaoComando */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AComandosComando */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AIfComando */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce AIfThenElseComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce ABlocoWhileComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AExpressaoExpressaoDec */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce AVazioExpressaoDec */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AVazioRetorno */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce AComExpressaoRetorno */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce AAtribuicaoExpressao */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AAtribuicaoStrExpressao */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce ASimplesExpressao */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AIdSimplesVar */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list);
            }
            break;
            case 33: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce AArrayMultiploArray */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list);
            }
            break;
            case 35: /* reduce AArrayBaseArray */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list);
            }
            break;
            case 36: /* reduce AMenorExpressaoSimples */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list);
            }
            break;
            case 37: /* reduce AMenorigualExpressaoSimples */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list);
            }
            break;
            case 38: /* reduce AMaiorExpressaoSimples */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce AMaiorigualExpressaoSimples */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce AIgualExpressaoSimples */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ADifExpressaoSimples */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce AAditivaExpressaoSimples */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce AAditivaSomaExpressao */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list);
            }
            break;
            case 44: /* reduce ASubtrativaSomaExpressao */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce ATermoSomaExpressao */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AMultiplicativaTermo */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce ADivisaoTermo */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list);
            }
            break;
            case 48: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list);
            }
            break;
            case 49: /* reduce AExpressaoFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list);
            }
            break;
            case 50: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list);
            }
            break;
            case 51: /* reduce AChamadaFator */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce ANumeroFator */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list);
            }
            break;
            case 53: /* reduce AChamada */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce AListaArgs */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AVazioArgs */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce AListaListaArgs */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce AExpressaoSimplesListaArgs */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list);
            }
            break;
            case 59: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }

        pprogramaNode1 = new APrograma(listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode3;
        listNode2 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pdeclaracaoNode3 != null)
	{
	  listNode4.add(pdeclaracaoNode3);
	}
        }

        pprogramaNode1 = new APrograma(listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVariavelDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        PVar pvarNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pdeclaracaoNode1 = new AVariavelDecDeclaracao(ptipoNode2, pvarNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFuncaoDecDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PCompostoDec pcompostodecNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        PParametro pparametroNode4;
        pparametroNode4 = (PParametro)nodeArrayList4.get(0);
	if(pparametroNode4 != null)
	{
	  listNode5.add(pparametroNode4);
	}
        }
        pcompostodecNode6 = (PCompostoDec)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new AFuncaoDecDeclaracao(ptipoNode2, tidNode3, listNode5, pcompostodecNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMainDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TInt tintNode2;
        TMain tmainNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PCompostoDec pcompostodecNode6;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tmainNode3 = (TMain)nodeArrayList2.get(0);
        {
            // Block
        PParametro pparametroNode4;
        pparametroNode4 = (PParametro)nodeArrayList4.get(0);
	if(pparametroNode4 != null)
	{
	  listNode5.add(pparametroNode4);
	}
        }
        pcompostodecNode6 = (PCompostoDec)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new AMainDeclaracao(tintNode2, tmainNode3, listNode5, pcompostodecNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATVoidTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptipoNode1 = new ATVoidTipo(tvoidNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ATIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptipoNode1 = new ATIntTipo(tintNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATStrTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptipoNode1 = new ATStrTipo(tstringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVazioParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block

        pparametroNode1 = new AVazioParametro();
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AParametrosListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList3.get(0);
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AParametroListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimplesParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new ANormalParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMatrizParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new ANormalParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABaseParray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParray pparrayNode1;
        {
            // Block

        pparrayNode1 = new AParray();
        }
	nodeList.add(pparrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AGeralParray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParray pparrayNode1;
        {
            // Block

        pparrayNode1 = new AParray();
        }
	nodeList.add(pparrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ACompostoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompostoDec pcompostodecNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
        {
            // Block
        PComando pcomandoNode4;
        pcomandoNode4 = (PComando)nodeArrayList3.get(0);
	if(pcomandoNode4 != null)
	{
	  listNode5.add(pcomandoNode4);
	}
        }

        pcompostodecNode1 = new ACompostoDec(listNode3, listNode5);
        }
	nodeList.add(pcompostodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AListaDeclaracoesLocais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList2.get(0);
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVazioDeclaracoesLocais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracao pdeclaracaoNode1;
        {
            // Block

        pdeclaracaoNode1 = new AVazioDeclaracao();
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListaListaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpressaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressaoDec pexpressaodecNode2;
        pexpressaodecNode2 = (PExpressaoDec)nodeArrayList1.get(0);

        pcomandoNode1 = new AExpressaoComando(pexpressaodecNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AComandosComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCompostoDec pcompostodecNode2;
        pcompostodecNode2 = (PCompostoDec)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandosComando(pcompostodecNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIfComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PCompostoDec pcompostodecNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);
        pcompostodecNode3 = (PCompostoDec)nodeArrayList5.get(0);

        pcomandoNode1 = new AIfComando(pexpressaoNode2, pcompostodecNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIfThenElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PCompostoDec pcompostodecNode3;
        PCompostoDec pcompostodecNode4;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);
        pcompostodecNode3 = (PCompostoDec)nodeArrayList5.get(0);
        pcompostodecNode4 = (PCompostoDec)nodeArrayList7.get(0);

        pcomandoNode1 = new AIfThenElseComando(pexpressaoNode2, pcompostodecNode3, pcompostodecNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ABlocoWhileComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PCompostoDec pcompostodecNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);
        pcompostodecNode3 = (PCompostoDec)nodeArrayList5.get(0);

        pcomandoNode1 = new ABlocoWhileComando(pexpressaoNode2, pcompostodecNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExpressaoExpressaoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoDec pexpressaodecNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);

        pexpressaodecNode1 = new AExpressaoExpressaoDec(pexpressaoNode2);
        }
	nodeList.add(pexpressaodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AVazioExpressaoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoDec pexpressaodecNode1;
        {
            // Block

        pexpressaodecNode1 = new AVazioExpressaoDec();
        }
	nodeList.add(pexpressaodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVazioRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block

        pcomandoNode1 = new ARetornoVazioComando();
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AComExpressaoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        pcomandoNode1 = new ARetornoComando(pexpressaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAtribuicaoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PVar pvarNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaoNode1 = new AAtribuicaoExpressao(pvarNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAtribuicaoStrExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PVar pvarNode2;
        TStr tstrNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tstrNode3 = (TStr)nodeArrayList3.get(0);

        pexpressaoNode1 = new AAtribuicaoStrExpressao(pvarNode2, tstrNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimplesExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);

        pexpressaoNode1 = new ASimplesExpressao(pexpressaosimplesNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIdSimplesVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdSimplesVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        PArray parrayNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayNode3 = (PArray)nodeArrayList2.get(0);

        pvarNode1 = new AIdArrayVar(tidNode2, parrayNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AArrayMultiploArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PArray parrayNode2;
        PExpressao pexpressaoNode3;
        parrayNode2 = (PArray)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        parrayNode1 = new AArrayMultiploArray(parrayNode2, pexpressaoNode3);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AArrayBaseArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        parrayNode1 = new AArrayBaseArray(pexpressaoNode2);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMenorExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AMenorExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMenorigualExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AMenorigualExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMaiorExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AMaiorExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMaiorigualExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AMaiorigualExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIgualExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AIgualExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADifExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new ADifExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAditivaExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        pexpressaosimplesNode1 = (PExpressaoSimples)nodeArrayList1.get(0);
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAditivaSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AAditivaExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ASubtrativaSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new ASubtrativaExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATermoSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        pexpressaosimplesNode1 = (PExpressaoSimples)nodeArrayList1.get(0);
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMultiplicativaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AMultiplicativaExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADivisaoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new ADivisaoExpressaoSimples(pexpressaosimplesNode2, pexpressaosimplesNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        pexpressaosimplesNode1 = (PExpressaoSimples)nodeArrayList1.get(0);
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExpressaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        pexpressaosimplesNode1 = new AExpressaoExpressaoSimples(pexpressaoNode2);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpressaosimplesNode1 = new AVariavelExpressaoSimples(pvarNode2);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AChamadaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        pexpressaosimplesNode1 = (PExpressaoSimples)nodeArrayList1.get(0);
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ANumeroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexpressaosimplesNode1 = new ANumeroExpressaoSimples(tnumNode2);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        TIdfunc tidfuncNode2;
        PArgs pargsNode3;
        tidfuncNode2 = (TIdfunc)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);

        pexpressaosimplesNode1 = new AChamadaExpressaoSimples(tidfuncNode2, pargsNode3);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PListaArgs plistaargsNode2;
        plistaargsNode2 = (PListaArgs)nodeArrayList1.get(0);

        pargsNode1 = new AListaArgs(plistaargsNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVazioArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArgs pargsNode1;
        {
            // Block

        pargsNode1 = new AVazioArgs();
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AListaListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaArgs plistaargsNode1;
        {
            // Block
        PListaArgs plistaargsNode2;
        PExpressaoSimples pexpressaosimplesNode3;
        plistaargsNode2 = (PListaArgs)nodeArrayList1.get(0);
        pexpressaosimplesNode3 = (PExpressaoSimples)nodeArrayList3.get(0);

        plistaargsNode1 = new AListaListaArgs(plistaargsNode2, pexpressaosimplesNode3);
        }
	nodeList.add(plistaargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExpressaoSimplesListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaArgs plistaargsNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);

        plistaargsNode1 = new AExpressaoListaArgs(pexpressaosimplesNode2);
        }
	nodeList.add(plistaargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 6}, {11, SHIFT, 9}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 4}, {35, ACCEPT, -1}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 7}, {12, SHIFT, 10}, },
			{{-1, ERROR, 8}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, ERROR, 9}, {28, SHIFT, 14}, },
			{{-1, REDUCE, 32}, {28, SHIFT, 15}, {30, SHIFT, 16}, },
			{{-1, ERROR, 11}, {26, SHIFT, 18}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {4, SHIFT, 19}, {5, SHIFT, 2}, {7, SHIFT, 20}, },
			{{-1, ERROR, 15}, {4, SHIFT, 19}, {5, SHIFT, 2}, {7, SHIFT, 20}, },
			{{-1, ERROR, 16}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 33}, {30, SHIFT, 37}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, {29, REDUCE, 9}, },
			{{-1, ERROR, 21}, {12, SHIFT, 38}, },
			{{-1, ERROR, 22}, {29, SHIFT, 39}, },
			{{-1, REDUCE, 8}, {27, SHIFT, 40}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 25}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 32}, {30, SHIFT, 16}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 28}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 55}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 30}, {31, SHIFT, 47}, },
			{{-1, REDUCE, 50}, {25, SHIFT, 48}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 42}, {15, SHIFT, 49}, {16, SHIFT, 50}, {19, SHIFT, 51}, {20, SHIFT, 52}, {21, SHIFT, 53}, {22, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, },
			{{-1, REDUCE, 45}, {17, SHIFT, 57}, {18, SHIFT, 58}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 37}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 12}, {30, SHIFT, 60}, },
			{{-1, ERROR, 39}, {32, SHIFT, 62}, },
			{{-1, ERROR, 40}, {4, SHIFT, 19}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, ERROR, 41}, {32, SHIFT, 62}, },
			{{-1, ERROR, 42}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 45}, {29, SHIFT, 67}, },
			{{-1, REDUCE, 54}, {27, SHIFT, 68}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 48}, {12, SHIFT, 26}, {13, SHIFT, 27}, {14, SHIFT, 69}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 49}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 50}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 51}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 52}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 53}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 54}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 55}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 56}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 57}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 58}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 59}, {31, SHIFT, 81}, },
			{{-1, ERROR, 60}, {31, SHIFT, 82}, },
			{{-1, REDUCE, 13}, {30, SHIFT, 83}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 68}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 43}, {17, SHIFT, 57}, {18, SHIFT, 58}, },
			{{-1, REDUCE, 44}, {17, SHIFT, 57}, {18, SHIFT, 58}, },
			{{-1, REDUCE, 36}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 37}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 38}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 39}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 40}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 41}, {15, SHIFT, 49}, {16, SHIFT, 50}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 83}, {31, SHIFT, 86}, },
			{{-1, ERROR, 84}, {2, SHIFT, 87}, {4, SHIFT, 19}, {5, SHIFT, 2}, {7, SHIFT, 3}, {8, SHIFT, 88}, {12, SHIFT, 26}, {13, SHIFT, 27}, {26, SHIFT, 89}, {28, SHIFT, 28}, {32, SHIFT, 62}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 87}, {28, SHIFT, 96}, },
			{{-1, ERROR, 88}, {28, SHIFT, 97}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 92}, {33, SHIFT, 98}, },
			{{-1, ERROR, 93}, {2, SHIFT, 87}, {8, SHIFT, 88}, {12, SHIFT, 26}, {13, SHIFT, 27}, {26, SHIFT, 89}, {28, SHIFT, 28}, {32, SHIFT, 62}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 95}, {26, SHIFT, 100}, },
			{{-1, ERROR, 96}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, ERROR, 97}, {12, SHIFT, 26}, {13, SHIFT, 27}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 99}, {6, SHIFT, 103}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 101}, {29, SHIFT, 105}, },
			{{-1, ERROR, 102}, {29, SHIFT, 106}, },
			{{-1, ERROR, 103}, {12, SHIFT, 26}, {13, SHIFT, 27}, {26, SHIFT, 107}, {28, SHIFT, 28}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 105}, {32, SHIFT, 62}, },
			{{-1, ERROR, 106}, {32, SHIFT, 62}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 108}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 22}, {3, SHIFT, 112}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 112}, {32, SHIFT, 62}, },
			{{-1, REDUCE, 23}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {8, 12}, {84, 90}, },
			{{-1, 6}, {8, 13}, },
			{{-1, 21}, {0, 7}, {8, 7}, {84, 7}, },
			{{-1, 22}, {15, 25}, },
			{{-1, 23}, },
			{{-1, 24}, {40, 64}, },
			{{-1, 61}, },
			{{-1, 91}, {39, 63}, {41, 65}, {105, 109}, {106, 110}, {112, 113}, },
			{{-1, 84}, },
			{{-1, 92}, {93, 99}, },
			{{-1, 93}, },
			{{-1, 94}, },
			{{-1, 104}, },
			{{-1, 95}, {16, 30}, {28, 42}, {37, 59}, {96, 101}, {97, 102}, {103, 108}, },
			{{-1, 43}, {7, 11}, {16, 31}, {28, 31}, {37, 31}, {84, 31}, {93, 31}, {96, 31}, {97, 31}, {103, 31}, },
			{{-1, 17}, },
			{{-1, 32}, {29, 44}, {48, 70}, {68, 85}, },
			{{-1, 33}, {51, 73}, {52, 74}, {53, 75}, {54, 76}, {55, 77}, {56, 78}, },
			{{-1, 34}, {49, 71}, {50, 72}, },
			{{-1, 35}, {57, 79}, {58, 80}, },
			{{-1, 36}, },
			{{-1, 45}, },
			{{-1, 46}, },
			{{-1, 8}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: 'int main', id",
			"expecting: id",
			"expecting: EOF",
			"expecting: parentese e",
			"expecting: ponto virgula, parentese e, colchete e",
			"expecting: ponto virgula",
			"expecting: id, num, parentese e, idfunc",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, atribuicao, ponto virgula, ',', parentese d, colchete e, colchete d",
			"expecting: 'if', 'int', 'string', 'void', 'while', id, num, ponto virgula, parentese e, chave e, idfunc",
			"expecting: id, parentese d",
			"expecting: parentese d",
			"expecting: ',', parentese d",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, ponto virgula, ',', parentese d, colchete d",
			"expecting: id, num, parentese e, parentese d, idfunc",
			"expecting: colchete d",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, atribuicao, ponto virgula, parentese d, colchete d",
			"expecting: ponto virgula, parentese d, colchete d",
			"expecting: mais, menos, menor, menor igual, maior, maior igual, igualdade, diferente, ponto virgula, ',', parentese d, colchete d",
			"expecting: ',', parentese d, colchete e",
			"expecting: chave e",
			"expecting: id, num, str, parentese e, idfunc",
			"expecting: mais, menos, ponto virgula, ',', parentese d, colchete d",
			"expecting: 'if', 'while', id, num, ponto virgula, parentese e, chave e, idfunc",
			"expecting: chave d",
			"expecting: 'if', 'else', 'int', 'string', 'void', 'while', id, num, ponto virgula, parentese e, chave e, idfunc, EOF",
			"expecting: 'return'",
			"expecting: id, num, ponto virgula, parentese e, idfunc",
			"expecting: 'return', chave d",
			"expecting: 'if', 'else', 'while', id, num, ponto virgula, parentese e, chave e, idfunc",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 0, 3, 2, 0, 4, 5, 6, 0, 3, 0, 0, 7, 8, 9, 2, 10, 2, 11, 12, 12, 11, 8, 13, 7, 14, 15, 16, 17, 18, 13, 13, 13, 7, 19, 20, 0, 20, 11, 13, 12, 11, 12, 8, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 19, 9, 3, 12, 9, 13, 13, 7, 17, 17, 13, 13, 22, 22, 22, 22, 22, 22, 13, 13, 8, 19, 15, 9, 12, 19, 4, 4, 23, 9, 23, 24, 23, 23, 6, 7, 7, 25, 26, 23, 11, 11, 27, 28, 20, 20, 28, 6, 29, 23, 28, 20, 23, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
