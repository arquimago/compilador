/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.parser;

import Cmenos.lexer.*;
import Cmenos.node.*;
import Cmenos.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AListaPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AListaListaDeclaracoes */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ADeclaracaoListaDeclaracoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AVariavelDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AFuncaoDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AVariavelDec */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ATVoidTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce ATIntTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ATStrTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AFuncaoDec */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AListaParametros */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AVazioParametros */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AParametrosListaParametros */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AParametroListaParametros */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ASimplesParametro */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AMatrizParametro */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ABaseParray */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AGeralParray */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce ADeclaracoesLocaisCompostoDec */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AListaDeclaracoesLocais */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce AVazioDeclaracoesLocais */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AListaListaComandos */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce AVazioListaComandos */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce AExpressaoComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce AComandosComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce AIfComando */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list, false);
            }
            break;
            case 26: /* reduce AIfThenElseComando */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce AIfElseComando */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ABlocoWhileComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ARetornoComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AEspressaoEspressaoDec */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AVazioEspressaoDec */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AVazioRetorno */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AComExpressaoRetorno */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AAtribuicaoExpressao */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce AAtribuicaoStrExpressao */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce ASimplesExpressao */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AIdSimplesVar */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce AArrayMultiploArray */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list, false);
            }
            break;
            case 40: /* reduce AArrayBaseArray */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce AComparativoExpressaoSimples */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce AAditivaExpressaoSimples */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list, false);
            }
            break;
            case 43: /* reduce AMenorComparacao */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AMenorigualComparacao */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AMaiorComparacao */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AMaiorigualComparacao */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, false);
            }
            break;
            case 47: /* reduce AIgualComparacao */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list, false);
            }
            break;
            case 48: /* reduce ADifComparacao */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce ASomaSomaExpressao */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list, false);
            }
            break;
            case 50: /* reduce ASubtracaoSomaExpressao */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce ATermoSomaExpressao */
            {
                ArrayList<Object> list = new51();
                push(goTo(21), list, false);
            }
            break;
            case 52: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list, false);
            }
            break;
            case 53: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list, false);
            }
            break;
            case 54: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list, false);
            }
            break;
            case 55: /* reduce AEspressaoFator */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list, false);
            }
            break;
            case 56: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list, false);
            }
            break;
            case 57: /* reduce AChamadaFator */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, false);
            }
            break;
            case 58: /* reduce ANumeroFator */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list, false);
            }
            break;
            case 59: /* reduce AChamada */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, false);
            }
            break;
            case 60: /* reduce AListaArgs */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list, false);
            }
            break;
            case 61: /* reduce AVazioArgs */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list, false);
            }
            break;
            case 62: /* reduce AListaListaArgs */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list, false);
            }
            break;
            case 63: /* reduce AExpressaoListaArgs */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AListaPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PListaDeclaracoes plistadeclaracoesNode2;
        plistadeclaracoesNode2 = (PListaDeclaracoes)nodeArrayList1.get(0);

        pprogramaNode1 = new AListaPrograma(plistadeclaracoesNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListaListaDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaDeclaracoes plistadeclaracoesNode1;
        {
            // Block
        PListaDeclaracoes plistadeclaracoesNode2;
        PDeclaracao pdeclaracaoNode3;
        plistadeclaracoesNode2 = (PListaDeclaracoes)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);

        plistadeclaracoesNode1 = new AListaListaDeclaracoes(plistadeclaracoesNode2, pdeclaracaoNode3);
        }
	nodeList.add(plistadeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclaracaoListaDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaDeclaracoes plistadeclaracoesNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);

        plistadeclaracoesNode1 = new ADeclaracaoListaDeclaracoes(pdeclaracaoNode2);
        }
	nodeList.add(plistadeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVariavelDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PVariavelDec pvariaveldecNode2;
        pvariaveldecNode2 = (PVariavelDec)nodeArrayList1.get(0);

        pdeclaracaoNode1 = new AVariavelDeclaracao(pvariaveldecNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncaoDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PFuncaoDec pfuncaodecNode2;
        pfuncaodecNode2 = (PFuncaoDec)nodeArrayList1.get(0);

        pdeclaracaoNode1 = new AFuncaoDeclaracao(pfuncaodecNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVariavelDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavelDec pvariaveldecNode1;
        {
            // Block
        PTipo ptipoNode2;
        PVar pvarNode3;
        TPontoVirgula tpontovirgulaNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tpontovirgulaNode4 = (TPontoVirgula)nodeArrayList3.get(0);

        pvariaveldecNode1 = new AVariavelDec(ptipoNode2, pvarNode3, tpontovirgulaNode4);
        }
	nodeList.add(pvariaveldecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ATVoidTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptipoNode1 = new ATVoidTipo(tvoidNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptipoNode1 = new ATIntTipo(tintNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATStrTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptipoNode1 = new ATStrTipo(tstringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFuncaoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncaoDec pfuncaodecNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        TParenteseE tparenteseeNode4;
        PParametros pparametrosNode5;
        TParenteseD tparentesedNode6;
        PCompostoDec pcompostodecNode7;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tparenteseeNode4 = (TParenteseE)nodeArrayList3.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList4.get(0);
        tparentesedNode6 = (TParenteseD)nodeArrayList5.get(0);
        pcompostodecNode7 = (PCompostoDec)nodeArrayList6.get(0);

        pfuncaodecNode1 = new AFuncaoDec(ptipoNode2, tidNode3, tparenteseeNode4, pparametrosNode5, tparentesedNode6, pcompostodecNode7);
        }
	nodeList.add(pfuncaodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PListaParametros plistaparametrosNode2;
        plistaparametrosNode2 = (PListaParametros)nodeArrayList1.get(0);

        pparametrosNode1 = new AListaParametros(plistaparametrosNode2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVazioParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pparametrosNode1 = new AVazioParametros(tvoidNode2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AParametrosListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaParametros plistaparametrosNode1;
        {
            // Block
        PListaParametros plistaparametrosNode2;
        TVirgula tvirgulaNode3;
        PParametro pparametroNode4;
        plistaparametrosNode2 = (PListaParametros)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pparametroNode4 = (PParametro)nodeArrayList3.get(0);

        plistaparametrosNode1 = new AParametrosListaParametros(plistaparametrosNode2, tvirgulaNode3, pparametroNode4);
        }
	nodeList.add(plistaparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AParametroListaParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaParametros plistaparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);

        plistaparametrosNode1 = new AParametroListaParametros(pparametroNode2);
        }
	nodeList.add(plistaparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASimplesParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new ASimplesParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMatrizParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParray pparrayNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pparrayNode4 = (PParray)nodeArrayList3.get(0);

        pparametroNode1 = new AMatrizParametro(ptipoNode2, tidNode3, pparrayNode4);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABaseParray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParray pparrayNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        TColcheteD tcolchetedNode3;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        tcolchetedNode3 = (TColcheteD)nodeArrayList2.get(0);

        pparrayNode1 = new ABaseParray(tcolcheteeNode2, tcolchetedNode3);
        }
	nodeList.add(pparrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AGeralParray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParray pparrayNode1;
        {
            // Block
        PParray pparrayNode2;
        TColcheteE tcolcheteeNode3;
        TColcheteD tcolchetedNode4;
        pparrayNode2 = (PParray)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        tcolchetedNode4 = (TColcheteD)nodeArrayList3.get(0);

        pparrayNode1 = new AGeralParray(pparrayNode2, tcolcheteeNode3, tcolchetedNode4);
        }
	nodeList.add(pparrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADeclaracoesLocaisCompostoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompostoDec pcompostodecNode1;
        {
            // Block
        TChaveE tchaveeNode2;
        PDeclaracoesLocais pdeclaracoeslocaisNode3;
        PListaComandos plistacomandosNode4;
        TChaveD tchavedNode5;
        tchaveeNode2 = (TChaveE)nodeArrayList1.get(0);
        pdeclaracoeslocaisNode3 = (PDeclaracoesLocais)nodeArrayList2.get(0);
        plistacomandosNode4 = (PListaComandos)nodeArrayList3.get(0);
        tchavedNode5 = (TChaveD)nodeArrayList4.get(0);

        pcompostodecNode1 = new ADeclaracoesLocaisCompostoDec(tchaveeNode2, pdeclaracoeslocaisNode3, plistacomandosNode4, tchavedNode5);
        }
	nodeList.add(pcompostodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListaDeclaracoesLocais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoesLocais pdeclaracoeslocaisNode1;
        {
            // Block
        PDeclaracoesLocais pdeclaracoeslocaisNode2;
        PVariavelDec pvariaveldecNode3;
        pdeclaracoeslocaisNode2 = (PDeclaracoesLocais)nodeArrayList1.get(0);
        pvariaveldecNode3 = (PVariavelDec)nodeArrayList2.get(0);

        pdeclaracoeslocaisNode1 = new AListaDeclaracoesLocais(pdeclaracoeslocaisNode2, pvariaveldecNode3);
        }
	nodeList.add(pdeclaracoeslocaisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVazioDeclaracoesLocais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracoesLocais pdeclaracoeslocaisNode1;
        {
            // Block

        pdeclaracoeslocaisNode1 = new AVazioDeclaracoesLocais();
        }
	nodeList.add(pdeclaracoeslocaisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AListaListaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaComandos plistacomandosNode1;
        {
            // Block
        PListaComandos plistacomandosNode2;
        PComando pcomandoNode3;
        plistacomandosNode2 = (PListaComandos)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        plistacomandosNode1 = new AListaListaComandos(plistacomandosNode2, pcomandoNode3);
        }
	nodeList.add(plistacomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVazioListaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaComandos plistacomandosNode1;
        {
            // Block

        plistacomandosNode1 = new AVazioListaComandos();
        }
	nodeList.add(plistacomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AExpressaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PEspressaoDec pespressaodecNode2;
        pespressaodecNode2 = (PEspressaoDec)nodeArrayList1.get(0);

        pcomandoNode1 = new AExpressaoComando(pespressaodecNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AComandosComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCompostoDec pcompostodecNode2;
        pcompostodecNode2 = (PCompostoDec)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandosComando(pcompostodecNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIfComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIf tifNode2;
        TParenteseE tparenteseeNode3;
        PExpressao pexpressaoNode4;
        TParenteseD tparentesedNode5;
        PCompostoDec pcompostodecNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);
        tparentesedNode5 = (TParenteseD)nodeArrayList4.get(0);
        pcompostodecNode6 = (PCompostoDec)nodeArrayList5.get(0);

        pcomandoNode1 = new AIfComando(tifNode2, tparenteseeNode3, pexpressaoNode4, tparentesedNode5, pcompostodecNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIfThenElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIf tifNode2;
        TParenteseE tparenteseeNode3;
        PExpressao pexpressaoNode4;
        TParenteseD tparentesedNode5;
        PCompostoDec pcompostodecNode6;
        TElse telseNode7;
        PCompostoDec pcompostodecNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);
        tparentesedNode5 = (TParenteseD)nodeArrayList4.get(0);
        pcompostodecNode6 = (PCompostoDec)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pcompostodecNode8 = (PCompostoDec)nodeArrayList7.get(0);

        pcomandoNode1 = new AIfThenElseComando(tifNode2, tparenteseeNode3, pexpressaoNode4, tparentesedNode5, pcompostodecNode6, telseNode7, pcompostodecNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIfElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIf tifNode2;
        TParenteseE tparenteseeNode3;
        PExpressao pexpressaoNode4;
        TParenteseD tparentesedNode5;
        TPontoVirgula tpontovirgulaNode6;
        TElse telseNode7;
        PCompostoDec pcompostodecNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);
        tparentesedNode5 = (TParenteseD)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pcompostodecNode8 = (PCompostoDec)nodeArrayList7.get(0);

        pcomandoNode1 = new AIfElseComando(tifNode2, tparenteseeNode3, pexpressaoNode4, tparentesedNode5, tpontovirgulaNode6, telseNode7, pcompostodecNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABlocoWhileComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TWhile twhileNode2;
        TParenteseE tparenteseeNode3;
        PExpressao pexpressaoNode4;
        TParenteseD tparentesedNode5;
        PCompostoDec pcompostodecNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);
        tparentesedNode5 = (TParenteseD)nodeArrayList4.get(0);
        pcompostodecNode6 = (PCompostoDec)nodeArrayList5.get(0);

        pcomandoNode1 = new ABlocoWhileComando(twhileNode2, tparenteseeNode3, pexpressaoNode4, tparentesedNode5, pcompostodecNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ARetornoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PRetorno pretornoNode2;
        pretornoNode2 = (PRetorno)nodeArrayList1.get(0);

        pcomandoNode1 = new ARetornoComando(pretornoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AEspressaoEspressaoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEspressaoDec pespressaodecNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        TPontoVirgula tpontovirgulaNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        pespressaodecNode1 = new AEspressaoEspressaoDec(pexpressaoNode2, tpontovirgulaNode3);
        }
	nodeList.add(pespressaodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AVazioEspressaoDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEspressaoDec pespressaodecNode1;
        {
            // Block
        TPontoVirgula tpontovirgulaNode2;
        tpontovirgulaNode2 = (TPontoVirgula)nodeArrayList1.get(0);

        pespressaodecNode1 = new AVazioEspressaoDec(tpontovirgulaNode2);
        }
	nodeList.add(pespressaodecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AVazioRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetorno pretornoNode1;
        {
            // Block
        TReturn treturnNode2;
        TPontoVirgula tpontovirgulaNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        pretornoNode1 = new AVazioRetorno(treturnNode2, tpontovirgulaNode3);
        }
	nodeList.add(pretornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AComExpressaoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetorno pretornoNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpressao pexpressaoNode3;
        TPontoVirgula tpontovirgulaNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList2.get(0);
        tpontovirgulaNode4 = (TPontoVirgula)nodeArrayList3.get(0);

        pretornoNode1 = new AComExpressaoRetorno(treturnNode2, pexpressaoNode3, tpontovirgulaNode4);
        }
	nodeList.add(pretornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAtribuicaoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtribuicao tatribuicaoNode3;
        PExpressaoSimples pexpressaosimplesNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpressaosimplesNode4 = (PExpressaoSimples)nodeArrayList3.get(0);

        pexpressaoNode1 = new AAtribuicaoExpressao(pvarNode2, tatribuicaoNode3, pexpressaosimplesNode4);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAtribuicaoStrExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtribuicao tatribuicaoNode3;
        TStr tstrNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        tstrNode4 = (TStr)nodeArrayList3.get(0);

        pexpressaoNode1 = new AAtribuicaoStrExpressao(pvarNode2, tatribuicaoNode3, tstrNode4);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimplesExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressaoSimples pexpressaosimplesNode2;
        pexpressaosimplesNode2 = (PExpressaoSimples)nodeArrayList1.get(0);

        pexpressaoNode1 = new ASimplesExpressao(pexpressaosimplesNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIdSimplesVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdSimplesVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        PArray parrayNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayNode3 = (PArray)nodeArrayList2.get(0);

        pvarNode1 = new AIdArrayVar(tidNode2, parrayNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AArrayMultiploArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PArray parrayNode2;
        TColcheteE tcolcheteeNode3;
        PExpressao pexpressaoNode4;
        TColcheteD tcolchetedNode5;
        parrayNode2 = (PArray)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);
        tcolchetedNode5 = (TColcheteD)nodeArrayList4.get(0);

        parrayNode1 = new AArrayMultiploArray(parrayNode2, tcolcheteeNode3, pexpressaoNode4, tcolchetedNode5);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AArrayBaseArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        PExpressao pexpressaoNode3;
        TColcheteD tcolchetedNode4;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList2.get(0);
        tcolchetedNode4 = (TColcheteD)nodeArrayList3.get(0);

        parrayNode1 = new AArrayBaseArray(tcolcheteeNode2, pexpressaoNode3, tcolchetedNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AComparativoExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PSomaExpressao psomaexpressaoNode2;
        PComparacao pcomparacaoNode3;
        PSomaExpressao psomaexpressaoNode4;
        psomaexpressaoNode2 = (PSomaExpressao)nodeArrayList1.get(0);
        pcomparacaoNode3 = (PComparacao)nodeArrayList2.get(0);
        psomaexpressaoNode4 = (PSomaExpressao)nodeArrayList3.get(0);

        pexpressaosimplesNode1 = new AComparativoExpressaoSimples(psomaexpressaoNode2, pcomparacaoNode3, psomaexpressaoNode4);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAditivaExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoSimples pexpressaosimplesNode1;
        {
            // Block
        PSomaExpressao psomaexpressaoNode2;
        psomaexpressaoNode2 = (PSomaExpressao)nodeArrayList1.get(0);

        pexpressaosimplesNode1 = new AAditivaExpressaoSimples(psomaexpressaoNode2);
        }
	nodeList.add(pexpressaosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMenorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TMenor tmenorNode2;
        tmenorNode2 = (TMenor)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorComparacao(tmenorNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMenorigualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TMenorIgual tmenorigualNode2;
        tmenorigualNode2 = (TMenorIgual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorigualComparacao(tmenorigualNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMaiorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TMaior tmaiorNode2;
        tmaiorNode2 = (TMaior)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorComparacao(tmaiorNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMaiorigualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TMaiorIgual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorIgual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorigualComparacao(tmaiorigualNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TIgualdade tigualdadeNode2;
        tigualdadeNode2 = (TIgualdade)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AIgualComparacao(tigualdadeNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADifComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TDiferente tdiferenteNode2;
        tdiferenteNode2 = (TDiferente)nodeArrayList1.get(0);

        pcomparacaoNode1 = new ADifComparacao(tdiferenteNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASomaSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaExpressao psomaexpressaoNode1;
        {
            // Block
        PSomaExpressao psomaexpressaoNode2;
        TMais tmaisNode3;
        PTermo ptermoNode4;
        psomaexpressaoNode2 = (PSomaExpressao)nodeArrayList1.get(0);
        tmaisNode3 = (TMais)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        psomaexpressaoNode1 = new ASomaSomaExpressao(psomaexpressaoNode2, tmaisNode3, ptermoNode4);
        }
	nodeList.add(psomaexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ASubtracaoSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaExpressao psomaexpressaoNode1;
        {
            // Block
        PSomaExpressao psomaexpressaoNode2;
        TMenos tmenosNode3;
        PTermo ptermoNode4;
        psomaexpressaoNode2 = (PSomaExpressao)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        psomaexpressaoNode1 = new ASubtracaoSomaExpressao(psomaexpressaoNode2, tmenosNode3, ptermoNode4);
        }
	nodeList.add(psomaexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATermoSomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaExpressao psomaexpressaoNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        psomaexpressaoNode1 = new ATermoSomaExpressao(ptermoNode2);
        }
	nodeList.add(psomaexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        TMult tmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new AMultTermo(ptermoNode2, tmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        TDiv tdivNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new ADivTermo(ptermoNode2, tdivNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatorTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEspressaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TParenteseE tparenteseeNode2;
        PExpressao pexpressaoNode3;
        TParenteseD tparentesedNode4;
        tparenteseeNode2 = (TParenteseE)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList2.get(0);
        tparentesedNode4 = (TParenteseD)nodeArrayList3.get(0);

        pfatorNode1 = new AEspressaoFator(tparenteseeNode2, pexpressaoNode3, tparentesedNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfatorNode1 = new AVariavelFator(pvarNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AChamadaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        pfatorNode1 = new AChamadaFator(pchamadaNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANumeroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pfatorNode1 = new ANumeroFator(tnumNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TIdfunc tidfuncNode2;
        PArgs pargsNode3;
        TParenteseD tparentesedNode4;
        tidfuncNode2 = (TIdfunc)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        tparentesedNode4 = (TParenteseD)nodeArrayList3.get(0);

        pchamadaNode1 = new AChamada(tidfuncNode2, pargsNode3, tparentesedNode4);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PListaArgs plistaargsNode2;
        plistaargsNode2 = (PListaArgs)nodeArrayList1.get(0);

        pargsNode1 = new AListaArgs(plistaargsNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AVazioArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArgs pargsNode1;
        {
            // Block

        pargsNode1 = new AVazioArgs();
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AListaListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaArgs plistaargsNode1;
        {
            // Block
        PListaArgs plistaargsNode2;
        TVirgula tvirgulaNode3;
        PExpressao pexpressaoNode4;
        plistaargsNode2 = (PListaArgs)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);

        plistaargsNode1 = new AListaListaArgs(plistaargsNode2, tvirgulaNode3, pexpressaoNode4);
        }
	nodeList.add(plistaargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpressaoListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaArgs plistaargsNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);

        plistaargsNode1 = new AExpressaoListaArgs(pexpressaoNode2);
        }
	nodeList.add(plistaargsNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 4}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {11, SHIFT, 11}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 37}, {27, SHIFT, 13}, {29, SHIFT, 14}, },
			{{-1, ERROR, 12}, {25, SHIFT, 16}, },
			{{-1, ERROR, 13}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 17}, },
			{{-1, ERROR, 14}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 38}, {29, SHIFT, 33}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, {28, REDUCE, 11}, },
			{{-1, ERROR, 18}, {11, SHIFT, 34}, },
			{{-1, ERROR, 19}, {28, SHIFT, 35}, },
			{{-1, REDUCE, 10}, {26, SHIFT, 36}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 37}, {29, SHIFT, 14}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 24}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 61}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 26}, {30, SHIFT, 41}, },
			{{-1, REDUCE, 56}, {24, SHIFT, 42}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 42}, {14, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {19, SHIFT, 46}, {20, SHIFT, 47}, {21, SHIFT, 48}, {22, SHIFT, 49}, {23, SHIFT, 50}, },
			{{-1, REDUCE, 51}, {16, SHIFT, 52}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 33}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 14}, {29, SHIFT, 55}, },
			{{-1, ERROR, 35}, {31, SHIFT, 57}, },
			{{-1, ERROR, 36}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, ERROR, 37}, {28, SHIFT, 60}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 39}, {28, SHIFT, 61}, },
			{{-1, REDUCE, 60}, {26, SHIFT, 62}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 42}, {11, SHIFT, 22}, {12, SHIFT, 23}, {13, SHIFT, 63}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 43}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 44}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 51}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 52}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 53}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 54}, {30, SHIFT, 71}, },
			{{-1, ERROR, 55}, {30, SHIFT, 72}, },
			{{-1, REDUCE, 15}, {29, SHIFT, 73}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 62}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 49}, {16, SHIFT, 52}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 50}, {16, SHIFT, 52}, {17, SHIFT, 53}, },
			{{-1, REDUCE, 41}, {14, SHIFT, 43}, {15, SHIFT, 44}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 73}, {30, SHIFT, 76}, },
			{{-1, REDUCE, 22}, {4, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 78}, {11, SHIFT, 22}, },
			{{-1, ERROR, 79}, {2, SHIFT, 80}, {6, SHIFT, 81}, {8, SHIFT, 82}, {11, SHIFT, 22}, {12, SHIFT, 23}, {25, SHIFT, 83}, {27, SHIFT, 24}, {31, SHIFT, 57}, {32, SHIFT, 84}, {33, SHIFT, 25}, },
			{{-1, ERROR, 80}, {27, SHIFT, 90}, },
			{{-1, ERROR, 81}, {11, SHIFT, 22}, {12, SHIFT, 23}, {25, SHIFT, 91}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, ERROR, 82}, {27, SHIFT, 93}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 89}, {25, SHIFT, 94}, },
			{{-1, ERROR, 90}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 92}, {25, SHIFT, 96}, },
			{{-1, ERROR, 93}, {11, SHIFT, 22}, {12, SHIFT, 23}, {27, SHIFT, 24}, {33, SHIFT, 25}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 95}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 97}, {28, SHIFT, 99}, },
			{{-1, ERROR, 98}, {25, SHIFT, 100}, {31, SHIFT, 57}, },
			{{-1, ERROR, 99}, {31, SHIFT, 57}, },
			{{-1, ERROR, 100}, {3, SHIFT, 103}, },
			{{-1, REDUCE, 25}, {3, SHIFT, 104}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 103}, {31, SHIFT, 57}, },
			{{-1, ERROR, 104}, {31, SHIFT, 57}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 6}, {5, 10}, },
			{{-1, 7}, {74, 77}, },
			{{-1, 8}, {13, 18}, {36, 18}, {74, 78}, },
			{{-1, 9}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, {36, 59}, },
			{{-1, 56}, },
			{{-1, 58}, {79, 85}, {98, 101}, {99, 102}, {103, 105}, {104, 106}, },
			{{-1, 74}, },
			{{-1, 79}, },
			{{-1, 86}, },
			{{-1, 87}, },
			{{-1, 88}, },
			{{-1, 26}, {24, 37}, {25, 38}, {33, 54}, {62, 75}, {79, 89}, {81, 92}, {90, 95}, {93, 97}, },
			{{-1, 27}, {8, 12}, {42, 64}, {43, 64}, {44, 64}, {51, 64}, {52, 64}, {53, 64}, {78, 12}, },
			{{-1, 15}, },
			{{-1, 28}, {42, 65}, },
			{{-1, 51}, },
			{{-1, 29}, {51, 68}, },
			{{-1, 30}, {43, 66}, {44, 67}, },
			{{-1, 31}, {52, 69}, {53, 70}, },
			{{-1, 32}, },
			{{-1, 39}, },
			{{-1, 40}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'int', 'string', 'void', EOF",
			"expecting: ponto virgula, parentese e, colchete e",
			"expecting: ponto virgula",
			"expecting: id, num, parentese e, idfunc",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, atribuicao, ponto virgula, ',', parentese d, colchete e, colchete d",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ponto virgula, parentese e, chave e, chave d, idfunc, EOF",
			"expecting: id, parentese d",
			"expecting: parentese d",
			"expecting: ',', parentese d",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, ponto virgula, ',', parentese d, colchete d",
			"expecting: id, num, parentese e, parentese d, idfunc",
			"expecting: colchete d",
			"expecting: mais, menos, mult, div, menor, menor igual, maior, maior igual, igualdade, diferente, atribuicao, ponto virgula, ',', parentese d, colchete d",
			"expecting: ponto virgula, ',', parentese d, colchete d",
			"expecting: mais, menos, menor, menor igual, maior, maior igual, igualdade, diferente, ponto virgula, ',', parentese d, colchete d",
			"expecting: ',', parentese d, colchete e",
			"expecting: chave e",
			"expecting: id, num, str, parentese e, idfunc",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ponto virgula, parentese e, chave e, chave d, idfunc",
			"expecting: mais, menos, ponto virgula, ',', parentese d, colchete d",
			"expecting: 'if', 'return', 'while', id, num, ponto virgula, parentese e, chave e, chave d, idfunc",
			"expecting: parentese e",
			"expecting: id, num, ponto virgula, parentese e, idfunc",
			"expecting: 'if', 'else', 'int', 'string', 'return', 'void', 'while', id, num, ponto virgula, parentese e, chave e, chave d, idfunc, EOF",
			"expecting: ponto virgula, chave e",
			"expecting: 'else'",
			"expecting: 'if', 'else', 'return', 'while', id, num, ponto virgula, parentese e, chave e, chave d, idfunc",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 3, 3, 1, 3, 3, 4, 5, 0, 6, 7, 8, 9, 1, 10, 11, 11, 7, 12, 6, 13, 14, 15, 16, 17, 12, 12, 12, 6, 18, 19, 0, 10, 11, 10, 11, 7, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14, 18, 21, 3, 11, 12, 12, 6, 16, 12, 16, 12, 12, 22, 12, 12, 7, 18, 14, 21, 11, 18, 21, 1, 23, 24, 25, 24, 23, 26, 23, 23, 23, 23, 5, 6, 23, 5, 6, 23, 10, 23, 10, 27, 19, 28, 29, 23, 19, 19, 23, 23, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
