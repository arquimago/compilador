/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cmenos.node;

import Cmenos.analysis.*;

@SuppressWarnings("nls")
public final class AIfThenElseComando extends PComando
{
    private TIf _if_;
    private TParenteseE _parenteseE_;
    private PExpressao _expressao_;
    private TParenteseD _parenteseD_;
    private PCompostoDec _v_;
    private TElse _else_;
    private PCompostoDec _f_;

    public AIfThenElseComando()
    {
        // Constructor
    }

    public AIfThenElseComando(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TParenteseE _parenteseE_,
        @SuppressWarnings("hiding") PExpressao _expressao_,
        @SuppressWarnings("hiding") TParenteseD _parenteseD_,
        @SuppressWarnings("hiding") PCompostoDec _v_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PCompostoDec _f_)
    {
        // Constructor
        setIf(_if_);

        setParenteseE(_parenteseE_);

        setExpressao(_expressao_);

        setParenteseD(_parenteseD_);

        setV(_v_);

        setElse(_else_);

        setF(_f_);

    }

    @Override
    public Object clone()
    {
        return new AIfThenElseComando(
            cloneNode(this._if_),
            cloneNode(this._parenteseE_),
            cloneNode(this._expressao_),
            cloneNode(this._parenteseD_),
            cloneNode(this._v_),
            cloneNode(this._else_),
            cloneNode(this._f_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfThenElseComando(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TParenteseE getParenteseE()
    {
        return this._parenteseE_;
    }

    public void setParenteseE(TParenteseE node)
    {
        if(this._parenteseE_ != null)
        {
            this._parenteseE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseE_ = node;
    }

    public PExpressao getExpressao()
    {
        return this._expressao_;
    }

    public void setExpressao(PExpressao node)
    {
        if(this._expressao_ != null)
        {
            this._expressao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressao_ = node;
    }

    public TParenteseD getParenteseD()
    {
        return this._parenteseD_;
    }

    public void setParenteseD(TParenteseD node)
    {
        if(this._parenteseD_ != null)
        {
            this._parenteseD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseD_ = node;
    }

    public PCompostoDec getV()
    {
        return this._v_;
    }

    public void setV(PCompostoDec node)
    {
        if(this._v_ != null)
        {
            this._v_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._v_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PCompostoDec getF()
    {
        return this._f_;
    }

    public void setF(PCompostoDec node)
    {
        if(this._f_ != null)
        {
            this._f_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._f_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._parenteseE_)
            + toString(this._expressao_)
            + toString(this._parenteseD_)
            + toString(this._v_)
            + toString(this._else_)
            + toString(this._f_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._parenteseE_ == child)
        {
            this._parenteseE_ = null;
            return;
        }

        if(this._expressao_ == child)
        {
            this._expressao_ = null;
            return;
        }

        if(this._parenteseD_ == child)
        {
            this._parenteseD_ = null;
            return;
        }

        if(this._v_ == child)
        {
            this._v_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._f_ == child)
        {
            this._f_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._parenteseE_ == oldChild)
        {
            setParenteseE((TParenteseE) newChild);
            return;
        }

        if(this._expressao_ == oldChild)
        {
            setExpressao((PExpressao) newChild);
            return;
        }

        if(this._parenteseD_ == oldChild)
        {
            setParenteseD((TParenteseD) newChild);
            return;
        }

        if(this._v_ == oldChild)
        {
            setV((PCompostoDec) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._f_ == oldChild)
        {
            setF((PCompostoDec) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
