Package Cmenos;

Helpers

  numero = ['0'..'9'];
  letra = ['a'..'z']|['A'..'Z'];
  igual = '=';
  asterisco = '*';
  barra = '/';
  ponto_virgula = ';';
  virgula = ',';
  parentese_e = '(';
  parentese_d = ')';
  colchete_e = '[';
  colchete_d = ']';
  chave_e = '{';
  chave_d = '}';
  aspas ='"';

  mais = '+';
  menos = '-';
  multiplicacao = asterisco;
  divisao = barra;
  menor = '<';
  maior = '>';

  menor_igual = menor igual;
  maior_igual = maior igual;
  igualdade = igual igual;
  diferente = '!' igual;

  comentario_e = barra asterisco;
  comentario_d = asterisco barra;
  comentario_l = barra barra;

  nova_linha = 10;
  enter = 13;
  tab = 9;
  espaco = 32;
  quebra = enter|nova_linha|enter nova_linha|;
  branco = espaco|quebra|tab;

  caracter = [0..255];

  texto_linha = [caracter-[10+13]]*;
  texto_bloco = [caracter-[asterisco+barra]]*;
  comentario_linha = comentario_l texto_linha quebra;
  str = aspas (caracter)* aspas;

  reservadas = 'else'|'if'|'int'|'string'|'return'|'void'|'while';


States

  normal,comentario;


Tokens

  {normal, comentario} comentario_linha = comentario_linha;

  {normal -> comentario, comentario}  comentario_e = comentario_e;
  {comentario} comentario_corpo = texto_bloco;
  {normal -> comentario, comentario} comentario_d = comentario_d;
  {comentario} asterisco = asterisco;
  {comentario} barra = barra;

  {normal} if = 'if';
  {normal} else = 'else';
  {normal} int = 'int';
  {normal} string = 'string';
  {normal} return = 'return';
  {normal} void = 'void';
  {normal} while = 'while';
  {normal} input = 'input';
  {normal} output = 'output';

  {normal} id = letra letra*;
  {normal} num = numero numero*;
  {normal} str = str;
  {normal} branco = branco;

  {normal} soma = mais|menos;
  {normal} mult = divisao|multiplicacao;

  {normal} comparador = menor|menor_igual|maior|maior_igual|igualdade|diferente;
  {normal} atribuicao = igual;
  {normal} ponto_virgula = ponto_virgula;
  {normal} virgula = ',';
  {normal} parentese_e = parentese_e;
  {normal} parentese_d = parentese_d;
  {normal} colchete_e = colchete_e;
  {normal} colchete_d = colchete_d;
  {normal} chave_e = chave_e;
  {normal} chave_d = chave_d;


Ignored Tokens

  comentario_linha, branco, comentario_e, comentario_corpo, comentario_d;


Productions

  programa =
    {lista} lista_declaracoes;

  lista_declaracoes =
    {lista} lista_declaracoes declaracao |
    {declaracao} declaracao;

  declaracao =
    {variavel} variavel |
    {funcao} funcao;

  variavel =
    {nula} tipo id ponto_virgula |
    {matriz_nula} tipo id colchete_e num colchete_d ponto_virgula;

  tipo=
    {t_void} void |
    {t_int} int |
    {t_str} string;

  funcao =
    {funcao} tipo id parentese_e parametros parentese_d comandos;

  parametros =
    {lista} lista_parametros |
    {vazio} ;

  lista_parametros =
    {m_parametros} lista_parametros virgula parametro |
    {parametro} parametro;

  parametro =
    {simples} tipo id |
    {matriz} tipo id chave_e chave_d;

  comandos =
    {declaracoes_locais} colchete_e declaracoes_locais lista_comandos colchete_d;

  declaracoes_locais =
    {lista} declaracoes_locais variavel |
    {vazio} ;

  lista_comandos =
    {lista} lista_comandos comando |
    {vazio} ;

  comando =
    {c_expressao} c_espressao |
    {comandos} comandos |
    {bloco_if} bloco_if |
    {bloco_while} bloco_while |
    {retorno} retorno;

  c_espressao =
    {espressao} expressao ponto_virgula |
    {vazio} ponto_virgula;

  bloco_if =
    {if} if parentese_e expressao parentese_d comando;

  bloco_while =
    while parentese_e expressao parentese_d comando;

  retorno =
    {vazio} return ponto_virgula |
    {com_expressao} return expressao ponto_virgula;

  expressao =
    {atribuicao} var atribuicao expressao |
    {simples} expressao_simples ;

  var =
    {id_simples} id |
    {id_expressao} id colchete_e expressao colchete_d;

  expressao_simples =
    {comparativo} expressao_simples comparador expressao_aditiva |
    {aditiva} expressao_aditiva;

  expressao_aditiva =
    {soma} expressao_aditiva soma termo |
    {termo} termo;

  termo =
    {mult} termo mult fator |
    {fator} fator;

  fator =
    {espressao} parentese_e expressao parentese_d |
    {variavel} var |
    {chamada} chamada |
    {numero} num;

  chamada =
    id parentese_e args parentese_d;

  args =
    {lista} lista_args |
    {vazio} ;

  lista_args =
    {lista} lista_args expressao |
    {expressao} expressao;
