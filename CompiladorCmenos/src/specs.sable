Package Cmenos;

Helpers

  numero = ['0'..'9'];
  letra = ['a'..'z']|['A'..'Z'];
  igual = '=';
  asterisco = '*';
  barra = '/';
  ponto_virgula = ';';
  virgula = ',';
  parentese_e = '(';
  parentese_d = ')';
  colchete_e = '[';
  colchete_d = ']';
  chave_e = '{';
  chave_d = '}';
  aspas ='"';

  mais = '+';
  menos = '-';
  multiplicacao = asterisco;
  divisao = barra;
  menor = '<';
  maior = '>';

  menor_igual = menor igual;
  maior_igual = maior igual;
  igualdade = igual igual;
  diferente = '!' igual;

  comentario_e = barra asterisco;
  comentario_d = asterisco barra;
  comentario_l = barra barra;

  nova_linha = 10;
  enter = 13;
  tab = 9;
  espaco = 32;
  quebra = enter|nova_linha|enter nova_linha|;
  branco = espaco|quebra|tab;

  caracter = [0..255];

  texto_linha = [caracter-[10+13]]*;
  texto_bloco = [caracter-[asterisco+barra]]*;
  comentario_linha = comentario_l texto_linha quebra;
  str = aspas (caracter)* aspas;

  reservadas = 'else'|'if'|'int'|'string'|'return'|'void'|'while';


States

  normal,comentario;


Tokens

  {normal, comentario} comentario_linha = comentario_linha;

  {normal -> comentario, comentario}  comentario_e = comentario_e;
  {comentario} comentario_corpo = texto_bloco;
  {normal -> comentario, comentario} comentario_d = comentario_d;
  {comentario} asterisco = asterisco;
  {comentario} barra = barra;

  {normal} if = 'if';
  {normal} else = 'else';
  {normal} int = 'int';
  {normal} string = 'string';
  {normal} return = 'return';
  {normal} void = 'void';
  {normal} while = 'while';
  {normal} input = 'input';
  {normal} output = 'output';
  {normal} main = 'int main';

  {normal} id = letra letra*;
  {normal} num = numero numero*;
  {normal} str = str;
  {normal} branco = branco;

  {normal} mais = mais;
  {normal} menos = menos;
  {normal} mult = multiplicacao;
  {normal} div = divisao;

  {normal} menor = menor;
  {normal} menor_igual = menor_igual;
  {normal} maior = maior;
  {normal} maior_igual = maior_igual;
  {normal} igualdade = igualdade;
  {normal} diferente = diferente;

  {normal} atribuicao = igual;
  {normal} ponto_virgula = ponto_virgula;
  {normal} virgula = ',';
  {normal} parentese_e = parentese_e;
  {normal} parentese_d = parentese_d;
  {normal} colchete_e = colchete_e;
  {normal} colchete_d = colchete_d;
  {normal} chave_e = chave_e;
  {normal} chave_d = chave_d;
  {normal} idfunc = letra letra* parentese_e;


Ignored Tokens

  comentario_linha, branco, comentario_e, comentario_corpo, comentario_d;


Productions

  programa {-> programa}=
    declaracao* main_dec {-> New programa([declaracao, main_dec.declaracao])};

  declaracao {-> declaracao}=
    {variavel} tipo var ponto_virgula {-> New declaracao.variavel_dec(tipo.tipo, var.var)}|
    {funcao_dec} tipo id parentese_e parametros parentese_d composto_dec {-> New declaracao.funcao_dec(tipo.tipo, id, [parametros.parametro], composto_dec.composto_dec)};

  main_dec {-> declaracao} =
    int main parentese_e parametros parentese_d composto_dec {-> New declaracao.main(int, main, [parametros.parametro], composto_dec.composto_dec)};

  tipo {-> tipo} =
    {t_void} void {-> New tipo.t_void(void)}|
    {t_int} int {-> New tipo.t_int(int)}|
    {t_str} string {-> New tipo.t_str(string)};

  parametros {-> parametro*} =
    {lista} lista_parametros {-> [lista_parametros.parametro]}|
    {vazio} void {-> [New parametro.vazio()]};

  lista_parametros {-> parametro*}=
    {parametros} lista_parametros virgula parametro {-> [lista_parametros.parametro, parametro.parametro]}|
    {parametro} parametro {-> [parametro]};

  parametro {-> parametro}=
    {simples} tipo id {-> New parametro.normal(tipo.tipo, id)}|
    {matriz} tipo id parray {-> New parametro.normal(tipo.tipo, id)};

  parray {-> parray}=
    {base} colchete_e colchete_d {-> New parray()}|
    {geral} parray colchete_e colchete_d {-> New parray()};

  composto_dec {-> composto_dec}=
    chave_e declaracoes_locais lista_comandos chave_d {-> New composto_dec([declaracoes_locais.declaracao],[lista_comandos.comando])};

  declaracoes_locais {-> declaracao*}=
    {lista} declaracoes_locais declaracao {-> [declaracoes_locais.declaracao, declaracao.declaracao]}|
    {vazio} {-> [New declaracao.vazio()]};

  lista_comandos {-> comando*}=
    {lista} comando lista_comandos {-> [comando.comando, lista_comandos.comando]}|
    {retorno} retorno {-> [retorno.comando]};

  comando {-> comando}=
    {output} void output parentese_e tipo parentese_d {-> New comando.output(tipo)}|
    {input} input parentese_e var parentese_d {-> New comando.input(var)}|
    {expressao} expressao_dec {-> New comando.expressao(expressao_dec)}|
    {comandos} composto_dec {-> New comando.comandos(composto_dec)}|
    {if} if parentese_e expressao parentese_d composto_dec {-> New comando.if(expressao.expressao, composto_dec.composto_dec)}|
    {if_then_else} if parentese_e expressao parentese_d [v]:composto_dec else [f]:composto_dec {-> New comando.if_then_else(expressao.expressao, v.composto_dec, f.composto_dec)}|
    {bloco_while} while parentese_e expressao parentese_d composto_dec {-> New comando.bloco_while(expressao.expressao, composto_dec.composto_dec)};

  expressao_dec {-> expressao_dec} =
    {expressao} expressao ponto_virgula {-> New expressao_dec.expressao(expressao)}|
    {vazio} ponto_virgula {-> New expressao_dec.vazio()};

  retorno {-> comando}=
    {vazio} return ponto_virgula {-> New comando.retorno_vazio()}|
    {com_expressao} return expressao ponto_virgula {-> New comando.retorno(expressao.expressao)};

  expressao {-> expressao}=
    {atribuicao} var atribuicao expressao_simples {-> New expressao.atribuicao(var.var, expressao_simples.expressao_simples)}|
    {atribuicao_str} var atribuicao str {-> New expressao.atribuicao_str(var.var, str)}|
    {simples} expressao_simples {-> New expressao.simples(expressao_simples.expressao_simples)};

  var {-> var}=
    {id_simples} id {-> New var.id_simples(id)}|
    {id_array} id array {-> New var.id_array(id, array.array)};

  array {-> array}=
    {array_multiplo} array colchete_e expressao colchete_d {-> New array.array_multiplo(array, expressao)}|
    {array_base} colchete_e expressao colchete_d {-> New array.array_base(expressao)};

  expressao_simples {-> expressao_simples}=
    {menor} [exp1]:soma_expressao menor [exp2]:soma_expressao {-> New expressao_simples.menor(exp1.expressao_simples, exp2.expressao_simples)}|
    {menorigual} [exp1]:soma_expressao menor_igual [exp2]:soma_expressao {-> New expressao_simples.menorigual(exp1.expressao_simples, exp2.expressao_simples)}|
    {maior} [exp1]:soma_expressao maior [exp2]:soma_expressao {-> New expressao_simples.maior(exp1.expressao_simples, exp2.expressao_simples)}|
    {maiorigual} [exp1]:soma_expressao maior_igual [exp2]:soma_expressao {-> New expressao_simples.maiorigual(exp1.expressao_simples, exp2.expressao_simples)}|
    {igual} [exp1]:soma_expressao igualdade [exp2]:soma_expressao {-> New expressao_simples.igual(exp1.expressao_simples, exp2.expressao_simples)}|
    {dif} [exp1]:soma_expressao diferente [exp2]:soma_expressao {-> New expressao_simples.dif(exp1.expressao_simples, exp2.expressao_simples)}|
    {aditiva} soma_expressao {-> soma_expressao.expressao_simples};

  soma_expressao {-> expressao_simples}=
    {aditiva} soma_expressao mais termo {-> New expressao_simples.aditiva(soma_expressao.expressao_simples, termo.expressao_simples)}|
    {subtrativa} soma_expressao menos termo {-> New expressao_simples.subtrativa(soma_expressao.expressao_simples, termo.expressao_simples)}|
    {termo} termo {-> termo.expressao_simples};

  termo {-> expressao_simples}=
    {multiplicativa} termo mult fator {-> New expressao_simples.multiplicativa(termo.expressao_simples, fator.expressao_simples)}|
    {divisao} termo div fator {-> New expressao_simples.divisao(termo.expressao_simples, fator.expressao_simples)}|
    {fator} fator {-> fator.expressao_simples};

  fator {-> expressao_simples}=
    {expressao} parentese_e expressao parentese_d {-> New expressao_simples.expressao(expressao)}|
    {variavel} var {-> New expressao_simples.variavel(var)}|
    {chamada} chamada {-> chamada.expressao_simples}|
    {numero} num {-> New expressao_simples.numero(num)};

  chamada {-> expressao_simples}=
    idfunc args parentese_d {-> New expressao_simples.chamada(idfunc,args)};

  args {-> args}=
    {lista} lista_args {-> New args.lista(lista_args)}|
    {vazio} {-> New args.vazio()};

  lista_args {-> lista_args} =
    {lista} lista_args virgula expressao_simples {-> New lista_args.lista(lista_args, expressao_simples)}|
    {expressao_simples} expressao_simples {-> New lista_args.expressao(expressao_simples)};

Abstract Syntax Tree

programa =
  declaracao+;

declaracao =
  {variavel_dec} tipo var |
  {funcao_dec} tipo id parametro* composto_dec|
  {main} int main parametro* composto_dec |
  {vazio} ;

tipo =
  {t_void} void |
  {t_int} int |
  {t_str} string;

parametro =
  {normal} tipo id|
  {vazio} ;

composto_dec =
  declaracao* comando*;

comando =
  {input} var |
  {output} tipo |
  {expressao} expressao_dec |
  {comandos} composto_dec |
  {if} expressao composto_dec |
  {if_then_else} expressao [v]:composto_dec [f]:composto_dec |
  {bloco_while} expressao composto_dec |
  {retorno} expressao |
  {retorno_vazio} ;

expressao_dec =
  {expressao} expressao |
  {vazio} ;

expressao =
  {atribuicao} var expressao_simples |
  {atribuicao_str} var str |
  {simples} expressao_simples |
  {vazio} ;

var =
  {id_simples} id |
  {id_array} id array;

array =
  {array_multiplo} array expressao |
  {array_base} expressao;

parray =
  ;

expressao_simples =
  {menor} [exp1]:expressao_simples [exp2]:expressao_simples|
  {menorigual} [exp1]:expressao_simples [exp2]:expressao_simples|
  {maior} [exp1]:expressao_simples [exp2]:expressao_simples|
  {maiorigual} [exp1]:expressao_simples [exp2]:expressao_simples|
  {igual} [exp1]:expressao_simples [exp2]:expressao_simples|
  {dif} [exp1]:expressao_simples [exp2]:expressao_simples|
  {aditiva} [exp1]:expressao_simples [exp2]:expressao_simples|
  {subtrativa} [exp1]:expressao_simples [exp2]:expressao_simples|
  {multiplicativa} [exp1]:expressao_simples [exp2]:expressao_simples|
  {divisao} [exp1]:expressao_simples [exp2]:expressao_simples|
  {expressao} expressao |
  {variavel} var |
  {chamada} idfunc args|
  {numero} num;

args =
  {lista} lista_args |
  {vazio} ;

lista_args =
  {lista} lista_args expressao_simples |
  {expressao} expressao_simples;
