Package Cmenos;

Helpers

  numero = ['0'..'9'];
  letra = ['a'..'z']|['A'..'Z'];
  igual = '=';
  asterisco = '*';
  barra = '/';
  ponto_virgula = ';';
  virgula = ',';
  parentese_e = '(';
  parentese_d = ')';
  colchete_e = '[';
  colchete_d = ']';
  chave_e = '{';
  chave_d = '}';
  aspas ='"';

  mais = '+';
  menos = '-';
  multiplicacao = asterisco;
  divisao = barra;
  menor = '<';
  maior = '>';

  menor_igual = menor igual;
  maior_igual = maior igual;
  igualdade = igual igual;
  diferente = '!' igual;

  comentario_e = barra asterisco;
  comentario_d = asterisco barra;
  comentario_l = barra barra;

  nova_linha = 10;
  enter = 13;
  tab = 9;
  espaco = 32;
  quebra = enter|nova_linha|enter nova_linha|;
  branco = espaco|quebra|tab;

  caracter = [0..255];

  texto_linha = [caracter-[10+13]]*;
  texto_bloco = [caracter-[asterisco+barra]]*;
  comentario_linha = comentario_l texto_linha quebra;
  str = aspas (caracter)* aspas;

  reservadas = 'else'|'if'|'int'|'string'|'return'|'void'|'while';


States

  normal,comentario;


Tokens

  {normal, comentario} comentario_linha = comentario_linha;

  {normal -> comentario, comentario}  comentario_e = comentario_e;
  {comentario} comentario_corpo = texto_bloco;
  {normal -> comentario, comentario} comentario_d = comentario_d;
  {comentario} asterisco = asterisco;
  {comentario} barra = barra;

  {normal} if = 'if';
  {normal} else = 'else';
  {normal} int = 'int';
  {normal} string = 'string';
  {normal} return = 'return';
  {normal} void = 'void';
  {normal} while = 'while';
  {normal} input = 'input';
  {normal} output = 'output';

  {normal} id = letra letra*;
  {normal} num = numero numero*;
  {normal} str = str;
  {normal} branco = branco;

  {normal} soma = mais|menos;
  {normal} mult = divisao|multiplicacao;

  {normal} comparador = menor|menor_igual|maior|maior_igual|igualdade|diferente;
  {normal} atribuicao = igual;
  {normal} ponto_virgula = ponto_virgula;
  {normal} virgula = ',';
  {normal} parentese_e = parentese_e;
  {normal} parentese_d = parentese_d;
  {normal} colchete_e = colchete_e;
  {normal} colchete_d = colchete_d;
  {normal} chave_e = chave_e;
  {normal} chave_d = chave_d;


Ignored Tokens

  comentario_linha, branco, comentario_e, comentario_corpo, comentario_d;


Productions

  programa =
    {declaracoes} declaracoes;

  declaracoes =
    {lista} declaracoes s_declaracao |
    {s_declaracao} tipo s_declaracao;

  s_declaracao =
    {funcao_c_param} id parentese_e parametros parentese_d colchete_e comandos colchete_d |
    {funcao_s_param} id parentese_e parentese_d colchete_e comandos colchete_d |
    {variavel} var;

  var =
    {nula} id ponto_virgula |
    {atribuida} id atribuicao valor ponto_virgula |
    {matriz_nula} id r_matriz ponto_virgula|
    {matriz_atribuida} id r_matriz atribuicao chave_e valores chave_d ponto_virgula;

  tipo =
    {t_void} void |
    {t_int} int |
    {t_str} string;

  parametros =
    {m_parametros} parametros virgula parametro |
    {parametro} parametro;

  parametro =
    {parametro} tipo id;

  expressao =
    {expressao} expressao soma termo |
    {term} termo;

  termo =
    {t} termo mult fator |
    {fat} fator;

  fator =
    {f} parentese_e expressao parentese_d |
    {numero} numero_ou_funcao;

  valor =
    {v_num} num |
    {v_func} chama_funcao |
    {v_expressao} expressao |
    {v_str} str;

  numero_ou_funcao =
    {numero_int} num |
    {funcao_geral} chama_funcao;

  r_matriz =
    {dimensoes} r_matriz colchete_e numero_ou_funcao colchete_d |
    {dimensao} colchete_e numero_ou_funcao colchete_d;

  valores =
    {m_valores} valores virgula valor |
    {um_valor} valor;

  chama_funcao =
    {c_param} id parentese_e valores parentese_d |
    {s_param} id parentese_e parentese_d;

  comandos =
    {comandos} comandos comando |
    {comando} comando;

  comando =
    {chama_var} tipo var |
    {chama_func} chama_funcao |
    {bloco_while} bloco_while  |
    {bloco_if} bloco_if  |
    {retorno} retorno;

  retorno =
    {r_void} return |
    {r_int} return num |
    {r_str} return str;

  bloco_while =
    {bl_while} while parentese_e condicao parentese_d chave_e comandos chave_d;

  bloco_if =
    {casa} casa_decl |
    {nao_casa} nao_casa_decl;

  casa_decl =
    {if} if parentese_e condicao parentese_d casa_decl2 else casa_decl |
    {outra} chave_e comandos chave_d;

  casa_decl2 =
      {if} if parentese_e condicao parentese_d casa_decl2 else casa_decl |
      {outra} chave_e comandos chave_d;

  nao_casa_decl =
    {if} if parentese_e condicao parentese_d bloco_if |
    {casa_nao_casa} if parentese_e condicao parentese_d casa_decl else nao_casa_decl;

  condicao =
    {cond} valor comparador valor2;

  valor2 =
    valor;
